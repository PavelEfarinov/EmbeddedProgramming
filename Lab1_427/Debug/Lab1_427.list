
Lab1_427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c8c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800404c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000098  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002046  00000000  00000000  0002bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222ae  00000000  00000000  0002edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b904  00000000  00000000  0005106e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdadb  00000000  00000000  0005c972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a44d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002260  00000000  00000000  0012a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e20 	.word	0x08003e20

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08003e20 	.word	0x08003e20

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <is_button_pressed>:
 */

#include "button_helper.h"
#include "gpio.h"

int is_button_pressed() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	static int prev_state = 0;
	static int last_release = 0;
	int current_tick = HAL_GetTick();
 80004fa:	f000 ffcb 	bl	8001494 <HAL_GetTick>
 80004fe:	4603      	mov	r3, r0
 8000500:	607b      	str	r3, [r7, #4]
	uint8_t current_state =
			HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET ?
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	4813      	ldr	r0, [pc, #76]	; (8000554 <is_button_pressed+0x60>)
 8000508:	f001 fb76 	bl	8001bf8 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
					1 : 0;
 800050e:	2b00      	cmp	r3, #0
 8000510:	bf0c      	ite	eq
 8000512:	2301      	moveq	r3, #1
 8000514:	2300      	movne	r3, #0
 8000516:	b2db      	uxtb	r3, r3
	uint8_t current_state =
 8000518:	70fb      	strb	r3, [r7, #3]

	if (prev_state && current_state) {
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <is_button_pressed+0x64>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00c      	beq.n	800053c <is_button_pressed+0x48>
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d009      	beq.n	800053c <is_button_pressed+0x48>
		if (current_tick - last_release > 50) {
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <is_button_pressed+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	2b32      	cmp	r3, #50	; 0x32
 8000532:	dd01      	ble.n	8000538 <is_button_pressed+0x44>
			return 1;
 8000534:	2301      	movs	r3, #1
 8000536:	e008      	b.n	800054a <is_button_pressed+0x56>
		}
		return 0;
 8000538:	2300      	movs	r3, #0
 800053a:	e006      	b.n	800054a <is_button_pressed+0x56>
	} else {
		prev_state = current_state;
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <is_button_pressed+0x64>)
 8000540:	6013      	str	r3, [r2, #0]
		last_release = current_tick;
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <is_button_pressed+0x68>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
		return 0;
 8000548:	2300      	movs	r3, #0
	}
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40020800 	.word	0x40020800
 8000558:	20000090 	.word	0x20000090
 800055c:	20000094 	.word	0x20000094

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <MX_GPIO_Init+0xf0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b32      	ldr	r3, [pc, #200]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <MX_GPIO_Init+0xf0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <MX_GPIO_Init+0xf0>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_GPIO_Init+0xf0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <MX_GPIO_Init+0xf4>)
 800060a:	f001 fb0d 	bl	8001c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_GPIO_Init+0xf8>)
 8000624:	f001 f93c 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin;
 8000628:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0xf4>)
 8000642:	f001 f92d 	bl	80018a0 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40020800 	.word	0x40020800

0800065c <reset_leds>:
 *      Author: efarinov
 */
#include "led_helper.h"
#include "gpio.h"

void reset_leds(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	turn_off_green();
 8000660:	f000 f812 	bl	8000688 <turn_off_green>
	turn_off_red();
 8000664:	f000 f846 	bl	80006f4 <turn_off_red>
	turn_off_yellow();
 8000668:	f000 f85c 	bl	8000724 <turn_off_yellow>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <turn_on_green>:

void turn_on_green() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <turn_on_green+0x14>)
 800067c:	f001 fad4 	bl	8001c28 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020c00 	.word	0x40020c00

08000688 <turn_off_green>:

void turn_off_green() {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <turn_off_green+0x14>)
 8000694:	f001 fac8 	bl	8001c28 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020c00 	.word	0x40020c00

080006a0 <turn_on_red>:

void turn_on_red() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <turn_on_red+0x14>)
 80006ac:	f001 fabc 	bl	8001c28 <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <turn_on_only_red>:

void turn_on_only_red() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	turn_off_yellow();
 80006bc:	f000 f832 	bl	8000724 <turn_off_yellow>
	turn_off_green();
 80006c0:	f7ff ffe2 	bl	8000688 <turn_off_green>
	turn_on_red();
 80006c4:	f7ff ffec 	bl	80006a0 <turn_on_red>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <turn_on_only_green>:

void turn_on_only_green() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	turn_off_red();
 80006d0:	f000 f810 	bl	80006f4 <turn_off_red>
	turn_off_yellow();
 80006d4:	f000 f826 	bl	8000724 <turn_off_yellow>
	turn_on_green();
 80006d8:	f7ff ffca 	bl	8000670 <turn_on_green>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <turn_on_only_yellow>:

void turn_on_only_yellow() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	turn_off_red();
 80006e4:	f000 f806 	bl	80006f4 <turn_off_red>
	turn_on_yellow();
 80006e8:	f000 f810 	bl	800070c <turn_on_yellow>
	turn_off_green();
 80006ec:	f7ff ffcc 	bl	8000688 <turn_off_green>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <turn_off_red>:

void turn_off_red() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_off_red+0x14>)
 8000700:	f001 fa92 	bl	8001c28 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <turn_on_yellow>:

void turn_on_yellow() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Yellow_Led_GPIO_Port, Yellow_Led_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <turn_on_yellow+0x14>)
 8000718:	f001 fa86 	bl	8001c28 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020c00 	.word	0x40020c00

08000724 <turn_off_yellow>:

void turn_off_yellow() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Yellow_Led_GPIO_Port, Yellow_Led_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4802      	ldr	r0, [pc, #8]	; (8000738 <turn_off_yellow+0x14>)
 8000730:	f001 fa7a 	bl	8001c28 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020c00 	.word	0x40020c00

0800073c <increase_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int increase_mode(int mode, size_t sequences_number) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	if (mode >= sequences_number - 1) {
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d801      	bhi.n	8000754 <increase_mode+0x18>
		return 0;
 8000750:	2300      	movs	r3, #0
 8000752:	e001      	b.n	8000758 <increase_mode+0x1c>
	}
	return mode + 1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b095      	sub	sp, #84	; 0x54
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fe2d 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f9b7 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f7ff fef5 	bl	8000560 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000776:	f000 fd83 	bl	8001280 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	size_t sequences_number = 4;
 800077a:	2304      	movs	r3, #4
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
	size_t place_to_create_new = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48

	light_sequence_t **sequences = malloc(sizeof(light_sequence_t*) * 8);
 8000782:	2020      	movs	r0, #32
 8000784:	f003 f976 	bl	8003a74 <malloc>
 8000788:	4603      	mov	r3, r0
 800078a:	633b      	str	r3, [r7, #48]	; 0x30

	for (int i = 0; i < sequences_number; ++i) {
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
 8000790:	e00b      	b.n	80007aa <main+0x46>
		sequences[i] = malloc(sizeof(light_sequence_t));
 8000792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000798:	18d4      	adds	r4, r2, r3
 800079a:	2010      	movs	r0, #16
 800079c:	f003 f96a 	bl	8003a74 <malloc>
 80007a0:	4603      	mov	r3, r0
 80007a2:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < sequences_number; ++i) {
 80007a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a6:	3301      	adds	r3, #1
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
 80007aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d8ef      	bhi.n	8000792 <main+0x2e>
	}
	for (int i = 4; i < 8; ++i) {
 80007b2:	2304      	movs	r3, #4
 80007b4:	643b      	str	r3, [r7, #64]	; 0x40
 80007b6:	e008      	b.n	80007ca <main+0x66>
		sequences[i] = 0;
 80007b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007be:	4413      	add	r3, r2
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
	for (int i = 4; i < 8; ++i) {
 80007c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c6:	3301      	adds	r3, #1
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
 80007ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	ddf3      	ble.n	80007b8 <main+0x54>
	}
	sequences[0]->period = 500;
 80007d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007d8:	601a      	str	r2, [r3, #0]
	sequences[0]->last_tick = 0;
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
	sequences[0]->sequence_size = 4;
 80007e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2204      	movs	r2, #4
 80007e8:	605a      	str	r2, [r3, #4]
	enum LED_STATE STATE_1[] = { GREEN, RED, GREEN, YELLOW };
 80007ea:	4b9b      	ldr	r3, [pc, #620]	; (8000a58 <main+0x2f4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	61bb      	str	r3, [r7, #24]
	sequences[0]->states = STATE_1;
 80007f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f107 0218 	add.w	r2, r7, #24
 80007f8:	60da      	str	r2, [r3, #12]

	sequences[1]->period = 200;
 80007fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fc:	3304      	adds	r3, #4
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	22c8      	movs	r2, #200	; 0xc8
 8000802:	601a      	str	r2, [r3, #0]
	sequences[1]->last_tick = 0;
 8000804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000806:	3304      	adds	r3, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	sequences[1]->sequence_size = 3;
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	3304      	adds	r3, #4
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2203      	movs	r2, #3
 8000816:	605a      	str	r2, [r3, #4]
	enum LED_STATE STATE_2[] = { GREEN, YELLOW, RED };
 8000818:	4a90      	ldr	r2, [pc, #576]	; (8000a5c <main+0x2f8>)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	8019      	strh	r1, [r3, #0]
 8000824:	3302      	adds	r3, #2
 8000826:	0c12      	lsrs	r2, r2, #16
 8000828:	701a      	strb	r2, [r3, #0]
	sequences[1]->states = STATE_2;
 800082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082c:	3304      	adds	r3, #4
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f107 0214 	add.w	r2, r7, #20
 8000834:	60da      	str	r2, [r3, #12]

	sequences[2]->period = 5000;
 8000836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000838:	3308      	adds	r3, #8
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000840:	601a      	str	r2, [r3, #0]
	sequences[2]->last_tick = 0;
 8000842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000844:	3308      	adds	r3, #8
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
	sequences[2]->sequence_size = 2;
 800084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084e:	3308      	adds	r3, #8
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2202      	movs	r2, #2
 8000854:	605a      	str	r2, [r3, #4]
	enum LED_STATE STATE_3[] = { GREEN, RED };
 8000856:	2300      	movs	r3, #0
 8000858:	743b      	strb	r3, [r7, #16]
 800085a:	2301      	movs	r3, #1
 800085c:	747b      	strb	r3, [r7, #17]
	sequences[2]->states = STATE_3;
 800085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	60da      	str	r2, [r3, #12]

	sequences[3]->period = 75;
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	330c      	adds	r3, #12
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	224b      	movs	r2, #75	; 0x4b
 8000872:	601a      	str	r2, [r3, #0]
	sequences[3]->last_tick = 0;
 8000874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000876:	330c      	adds	r3, #12
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
	sequences[3]->sequence_size = 6;
 800087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000880:	330c      	adds	r3, #12
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2206      	movs	r2, #6
 8000886:	605a      	str	r2, [r3, #4]
	enum LED_STATE STATE_4[] = { YELLOW, GREEN, YELLOW, RED, GREEN, RED };
 8000888:	4a75      	ldr	r2, [pc, #468]	; (8000a60 <main+0x2fc>)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	8019      	strh	r1, [r3, #0]
	sequences[3]->states = STATE_4;
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	330c      	adds	r3, #12
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f107 0208 	add.w	r2, r7, #8
 80008a2:	60da      	str	r2, [r3, #12]

	int current_mode = 0, button_is_held = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t current_tick = HAL_GetTick(), start_tick = HAL_GetTick(),
 80008ac:	f000 fdf2 	bl	8001494 <HAL_GetTick>
 80008b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80008b2:	f000 fdef 	bl	8001494 <HAL_GetTick>
 80008b6:	6378      	str	r0, [r7, #52]	; 0x34
			sequence_tick = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		current_tick = HAL_GetTick();
 80008bc:	f000 fdea 	bl	8001494 <HAL_GetTick>
 80008c0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (current_tick - start_tick < 0) {
			start_tick = HAL_GetTick();
		}
		sequence_tick = (current_tick - start_tick
 80008c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c6:	1ad3      	subs	r3, r2, r3
				+ sequences[current_mode]->last_tick);
 80008c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008ca:	0092      	lsls	r2, r2, #2
 80008cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80008ce:	440a      	add	r2, r1
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	6892      	ldr	r2, [r2, #8]
		sequence_tick = (current_tick - start_tick
 80008d4:	4413      	add	r3, r2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28

		uart_command_result_t uart_command = process_uart_input();
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb22 	bl	8000f24 <process_uart_input>

		if (uart_command.result_type == UART_RESULT_SET) {
 80008e0:	783b      	ldrb	r3, [r7, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d132      	bne.n	800094c <main+0x1e8>
			int *new_mode = (int*) uart_command.result_data;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	623b      	str	r3, [r7, #32]
			if (*new_mode > 0 && *new_mode <= sequences_number) {
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dd27      	ble.n	8000942 <main+0x1de>
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d321      	bcc.n	8000942 <main+0x1de>
				sequences[current_mode]->last_tick = sequence_tick
						% (sequences[current_mode]->period
 80008fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000904:	4413      	add	r3, r2
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
								* sequences[current_mode]->sequence_size);
 800090a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000910:	440a      	add	r2, r1
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6852      	ldr	r2, [r2, #4]
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	461a      	mov	r2, r3
						% (sequences[current_mode]->period
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000922:	fb02 f201 	mul.w	r2, r2, r1
 8000926:	1a99      	subs	r1, r3, r2
				sequences[current_mode]->last_tick = sequence_tick
 8000928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
						% (sequences[current_mode]->period
 8000932:	460a      	mov	r2, r1
				sequences[current_mode]->last_tick = sequence_tick
 8000934:	609a      	str	r2, [r3, #8]
				current_mode = *new_mode - 1;
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
				start_tick = current_tick;
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
			}

			free(uart_command.result_data);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f003 f89d 	bl	8003a84 <free>
 800094a:	e04a      	b.n	80009e2 <main+0x27e>
		} else if (uart_command.result_type == UART_RESULT_NEW) {
 800094c:	783b      	ldrb	r3, [r7, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d147      	bne.n	80009e2 <main+0x27e>
			if (sequences[place_to_create_new] != 0) {
 8000952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000958:	4413      	add	r3, r2
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d010      	beq.n	8000982 <main+0x21e>
				free(sequences[place_to_create_new]->states);
 8000960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000966:	4413      	add	r3, r2
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	4618      	mov	r0, r3
 800096e:	f003 f889 	bl	8003a84 <free>
				free(sequences[place_to_create_new]);
 8000972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000978:	4413      	add	r3, r2
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f003 f881 	bl	8003a84 <free>
			}
			light_sequence_t *got_sequence =
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
					(light_sequence_t*) uart_command.result_data;

			sequences[place_to_create_new] = got_sequence;
 8000986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800098c:	4413      	add	r3, r2
 800098e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000990:	601a      	str	r2, [r3, #0]
			sequences[place_to_create_new]->last_tick = 0;
 8000992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]

			send_uart_int(sequences[place_to_create_new]->period);
 80009a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009a6:	4413      	add	r3, r2
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fa1b 	bl	8000de8 <send_uart_int>
			send_uart_int(sequences[place_to_create_new]->sequence_size);
 80009b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009b8:	4413      	add	r3, r2
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fa12 	bl	8000de8 <send_uart_int>

			if (place_to_create_new == 7) {
 80009c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d102      	bne.n	80009d0 <main+0x26c>
				place_to_create_new = 4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80009ce:	e002      	b.n	80009d6 <main+0x272>
			} else {
				place_to_create_new++;
 80009d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009d2:	3301      	adds	r3, #1
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (sequences_number < 8) {
 80009d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d802      	bhi.n	80009e2 <main+0x27e>
				sequences_number++;
 80009dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009de:	3301      	adds	r3, #1
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
//			send_uart_int(sequences_number);
//			send_uart_int(place_to_create_new);
		}

		int step = (sequence_tick / sequences[current_mode]->period)
 80009e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e8:	4413      	add	r3, r2
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f2:	fbb3 f3f2 	udiv	r3, r3, r2
				% sequences[current_mode]->sequence_size;
 80009f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80009fc:	440a      	add	r2, r1
 80009fe:	6812      	ldr	r2, [r2, #0]
 8000a00:	6852      	ldr	r2, [r2, #4]
 8000a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a06:	fb02 f201 	mul.w	r2, r2, r1
 8000a0a:	1a9b      	subs	r3, r3, r2
		int step = (sequence_tick / sequences[current_mode]->period)
 8000a0c:	61fb      	str	r3, [r7, #28]

		reset_leds();
 8000a0e:	f7ff fe25 	bl	800065c <reset_leds>
		HAL_Delay(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fd4a 	bl	80014ac <HAL_Delay>
		switch (sequences[current_mode]->states[step]) {
 8000a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1e:	4413      	add	r3, r2
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d81d      	bhi.n	8000a6a <main+0x306>
 8000a2e:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <main+0x2d0>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a4b 	.word	0x08000a4b
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000a65 	.word	0x08000a65
		case GREEN:
			turn_on_only_green();
 8000a44:	f7ff fe42 	bl	80006cc <turn_on_only_green>
			break;
 8000a48:	e00f      	b.n	8000a6a <main+0x306>
		case RED:
			turn_on_only_red();
 8000a4a:	f7ff fe35 	bl	80006b8 <turn_on_only_red>
			break;
 8000a4e:	e00c      	b.n	8000a6a <main+0x306>
		case YELLOW:
			turn_on_only_yellow();
 8000a50:	f7ff fe46 	bl	80006e0 <turn_on_only_yellow>
			break;
 8000a54:	e009      	b.n	8000a6a <main+0x306>
 8000a56:	bf00      	nop
 8000a58:	08003e38 	.word	0x08003e38
 8000a5c:	08003e3c 	.word	0x08003e3c
 8000a60:	08003e40 	.word	0x08003e40
		case BLACK:
			reset_leds();
 8000a64:	f7ff fdfa 	bl	800065c <reset_leds>
			break;
 8000a68:	bf00      	nop
		}
		if (is_button_pressed() && !button_is_held) {
 8000a6a:	f7ff fd43 	bl	80004f4 <is_button_pressed>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d028      	beq.n	8000ac6 <main+0x362>
 8000a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d125      	bne.n	8000ac6 <main+0x362>
			sequences[current_mode]->last_tick = sequence_tick
					% (sequences[current_mode]->period
 8000a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a80:	4413      	add	r3, r2
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
							* sequences[current_mode]->sequence_size);
 8000a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a8c:	440a      	add	r2, r1
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	6852      	ldr	r2, [r2, #4]
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	461a      	mov	r2, r3
					% (sequences[current_mode]->period
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a9e:	fb02 f201 	mul.w	r2, r2, r1
 8000aa2:	1a99      	subs	r1, r3, r2
			sequences[current_mode]->last_tick = sequence_tick
 8000aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aaa:	4413      	add	r3, r2
 8000aac:	681b      	ldr	r3, [r3, #0]
					% (sequences[current_mode]->period
 8000aae:	460a      	mov	r2, r1
			sequences[current_mode]->last_tick = sequence_tick
 8000ab0:	609a      	str	r2, [r3, #8]
			current_mode = increase_mode(current_mode, sequences_number);
 8000ab2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000ab4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ab6:	f7ff fe41 	bl	800073c <increase_mode>
 8000aba:	63f8      	str	r0, [r7, #60]	; 0x3c
			start_tick = current_tick;
 8000abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
			button_is_held = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ac4:	e00b      	b.n	8000ade <main+0x37a>
		} else if (!is_button_pressed() && button_is_held) {
 8000ac6:	f7ff fd15 	bl	80004f4 <is_button_pressed>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f47f aef5 	bne.w	80008bc <main+0x158>
 8000ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f43f aef1 	beq.w	80008bc <main+0x158>
			button_is_held = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8000ade:	e6ed      	b.n	80008bc <main+0x158>

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 ffd0 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <SystemClock_Config+0xd8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <SystemClock_Config+0xd8>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xd8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <SystemClock_Config+0xdc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <SystemClock_Config+0xdc>)
 8000b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xdc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b50:	230f      	movs	r3, #15
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b54:	23d8      	movs	r3, #216	; 0xd8
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 f8c9 	bl	8001cfc <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b70:	f000 f826 	bl	8000bc0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b74:	f001 f872 	bl	8001c5c <HAL_PWREx_EnableOverDrive>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b7e:	f000 f81f 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2302      	movs	r3, #2
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fb23 	bl	80021ec <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bac:	f000 f808 	bl	8000bc0 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 fc00 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <USART6_IRQHandler+0x10>)
 8000c76:	f001 ff93 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000b4 	.word	0x200000b4

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f002 fe9a 	bl	80039ec <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20030000 	.word	0x20030000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	20000110 	.word	0x20000110

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <HAL_UART_RxCpltCallback>:
light_sequence_t *new_sequence_buffered = 0;
int next_to_fill = 0;
int interrupts_enabled = 0;
int can_read = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	can_read = 1;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_UART_RxCpltCallback+0x1c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000004 	.word	0x20000004

08000d34 <send_uart>:

void send_uart(void *message, int size) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	if (interrupts_enabled) {
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <send_uart+0x48>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <send_uart+0x2a>
		while (HAL_UART_Transmit_IT(&huart6, (uint8_t*) message, size) != HAL_OK)
 8000d46:	bf00      	nop
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <send_uart+0x4c>)
 8000d52:	f001 fd9c 	bl	800288e <HAL_UART_Transmit_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f5      	bne.n	8000d48 <send_uart+0x14>
	} else {
		while (HAL_UART_Transmit(&huart6, (uint8_t*) message, size, 100)
				!= HAL_OK)
			;
	}
}
 8000d5c:	e00a      	b.n	8000d74 <send_uart+0x40>
		while (HAL_UART_Transmit(&huart6, (uint8_t*) message, size, 100)
 8000d5e:	bf00      	nop
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <send_uart+0x4c>)
 8000d6a:	f001 fc5c 	bl	8002626 <HAL_UART_Transmit>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f5      	bne.n	8000d60 <send_uart+0x2c>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000a8 	.word	0x200000a8
 8000d80:	200000b4 	.word	0x200000b4

08000d84 <send_uart_str>:

void send_uart_str(void *message) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	char *array = malloc(strlen(message) + 2);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fa2d 	bl	80001ec <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	3302      	adds	r3, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fe6c 	bl	8003a74 <malloc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60fb      	str	r3, [r7, #12]
	array[0] = 0;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	strcat(array, message);
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f002 ff35 	bl	8003c18 <strcat>
	strcat(array, "\r\n");
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff fa1c 	bl	80001ec <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <send_uart_str+0x60>)
 8000dbe:	8811      	ldrh	r1, [r2, #0]
 8000dc0:	7892      	ldrb	r2, [r2, #2]
 8000dc2:	8019      	strh	r1, [r3, #0]
 8000dc4:	709a      	strb	r2, [r3, #2]
	send_uart(array, strlen(array));
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff fa10 	bl	80001ec <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff ffaf 	bl	8000d34 <send_uart>
	free(array);
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f002 fe54 	bl	8003a84 <free>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08003e48 	.word	0x08003e48

08000de8 <send_uart_int>:

void send_uart_int(int message) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b090      	sub	sp, #64	; 0x40
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	char array[50];
	itoa(message, array, 10);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	220a      	movs	r2, #10
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f002 fe39 	bl	8003a70 <itoa>
	strcat(array, "\r\n");
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9f2 	bl	80001ec <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4413      	add	r3, r2
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <send_uart_int+0x58>)
 8000e14:	8811      	ldrh	r1, [r2, #0]
 8000e16:	7892      	ldrb	r2, [r2, #2]
 8000e18:	8019      	strh	r1, [r3, #0]
 8000e1a:	709a      	strb	r2, [r3, #2]
	send_uart(array, strlen(array));
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9e3 	bl	80001ec <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff7f 	bl	8000d34 <send_uart>
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08003e48 	.word	0x08003e48

08000e44 <is_new_command>:

int is_new_command(char *message) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	char *command = strstr(message, "new");
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <is_new_command+0x28>)
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f002 fef1 	bl	8003c36 <strstr>
 8000e54:	60f8      	str	r0, [r7, #12]
	return command == message;
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08003e4c 	.word	0x08003e4c

08000e70 <is_set_command>:

int is_set_command(char *message) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	char *command = strstr(message, "set");
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <is_set_command+0x28>)
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f002 fedb 	bl	8003c36 <strstr>
 8000e80:	60f8      	str	r0, [r7, #12]
	return command == message;
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	bf0c      	ite	eq
 8000e8a:	2301      	moveq	r3, #1
 8000e8c:	2300      	movne	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08003e50 	.word	0x08003e50

08000e9c <is_set_interrupt_command>:
int is_set_interrupt_command(char *message) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	char *command = strstr(message, "set interrupts");
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <is_set_interrupt_command+0x28>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f002 fec5 	bl	8003c36 <strstr>
 8000eac:	60f8      	str	r0, [r7, #12]
	return command == message;
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08003e54 	.word	0x08003e54

08000ec8 <read_uart>:

HAL_StatusTypeDef read_uart(char *data, size_t size) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result = HAL_BUSY;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	73fb      	strb	r3, [r7, #15]
	if (interrupts_enabled) {
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <read_uart+0x50>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00e      	beq.n	8000efc <read_uart+0x34>
		if (can_read) {
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <read_uart+0x54>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d013      	beq.n	8000f0e <read_uart+0x46>
			can_read = 0;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <read_uart+0x54>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart6, (uint8_t*) &data, size);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <read_uart+0x58>)
 8000ef6:	f001 fd0f 	bl	8002918 <HAL_UART_Receive_IT>
 8000efa:	e008      	b.n	8000f0e <read_uart+0x46>
		}
	} else {
		result = HAL_UART_Receive(&huart6, (uint8_t*) data, size,
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <read_uart+0x58>)
 8000f06:	f001 fc20 	bl	800274a <HAL_UART_Receive>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
				(uint32_t) 100);
	}
	return result;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000a8 	.word	0x200000a8
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	200000b4 	.word	0x200000b4

08000f24 <process_uart_input>:

uart_command_result_t process_uart_input() {
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	uart_command_result_t uart_result;
	uart_result.result_type = UART_RESULT_NONE;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	723b      	strb	r3, [r7, #8]

	if (buffer == 0) {
 8000f30:	4bac      	ldr	r3, [pc, #688]	; (80011e4 <process_uart_input+0x2c0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d117      	bne.n	8000f68 <process_uart_input+0x44>
		buffer = malloc(1024 * sizeof(char));
 8000f38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f3c:	f002 fd9a 	bl	8003a74 <malloc>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4ba7      	ldr	r3, [pc, #668]	; (80011e4 <process_uart_input+0x2c0>)
 8000f46:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 1024; i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f4c:	e008      	b.n	8000f60 <process_uart_input+0x3c>
			buffer[i] = 0;
 8000f4e:	4ba5      	ldr	r3, [pc, #660]	; (80011e4 <process_uart_input+0x2c0>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	4413      	add	r3, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 1024; i++) {
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f66:	dbf2      	blt.n	8000f4e <process_uart_input+0x2a>
		}
	}

	size_t size = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
	char data[size];
 8000f6c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000f6e:	466b      	mov	r3, sp
 8000f70:	461d      	mov	r5, r3
 8000f72:	4623      	mov	r3, r4
 8000f74:	3b01      	subs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f04f 0100 	mov.w	r1, #0
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	00cb      	lsls	r3, r1, #3
 8000f88:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f8c:	00c2      	lsls	r2, r0, #3
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f04f 0100 	mov.w	r1, #0
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	00cb      	lsls	r3, r1, #3
 8000f9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fa2:	00c2      	lsls	r2, r0, #3
 8000fa4:	1de3      	adds	r3, r4, #7
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	ebad 0d03 	sub.w	sp, sp, r3
 8000fae:	466b      	mov	r3, sp
 8000fb0:	3300      	adds	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
	HAL_StatusTypeDef result = read_uart(data, size);
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff85 	bl	8000ec8 <read_uart>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	77fb      	strb	r3, [r7, #31]

	if (result == HAL_OK && can_read) {
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 8143 	bne.w	8001250 <process_uart_input+0x32c>
 8000fca:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <process_uart_input+0x2c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 813e 	beq.w	8001250 <process_uart_input+0x32c>
		send_uart(data, 1);
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff feab 	bl	8000d34 <send_uart>
		if (data[0] == 127) {
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe4:	d10c      	bne.n	8001000 <process_uart_input+0xdc>
			buffer[next_to_fill] = 0;
 8000fe6:	4b7f      	ldr	r3, [pc, #508]	; (80011e4 <process_uart_input+0x2c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a80      	ldr	r2, [pc, #512]	; (80011ec <process_uart_input+0x2c8>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
			next_to_fill--;
 8000ff4:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <process_uart_input+0x2c8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a7c      	ldr	r2, [pc, #496]	; (80011ec <process_uart_input+0x2c8>)
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00a      	b.n	8001016 <process_uart_input+0xf2>
		} else {
			buffer[next_to_fill++] = data[0];
 8001000:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <process_uart_input+0x2c0>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b79      	ldr	r3, [pc, #484]	; (80011ec <process_uart_input+0x2c8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1c59      	adds	r1, r3, #1
 800100a:	4878      	ldr	r0, [pc, #480]	; (80011ec <process_uart_input+0x2c8>)
 800100c:	6001      	str	r1, [r0, #0]
 800100e:	4413      	add	r3, r2
 8001010:	6a3a      	ldr	r2, [r7, #32]
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	701a      	strb	r2, [r3, #0]
		}
		if (data[0] == '\r') {
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b0d      	cmp	r3, #13
 800101c:	f040 8118 	bne.w	8001250 <process_uart_input+0x32c>
			strcat(buffer, "\n");
 8001020:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <process_uart_input+0x2c0>)
 8001022:	681c      	ldr	r4, [r3, #0]
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff f8e1 	bl	80001ec <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	4423      	add	r3, r4
 800102e:	4970      	ldr	r1, [pc, #448]	; (80011f0 <process_uart_input+0x2cc>)
 8001030:	461a      	mov	r2, r3
 8001032:	460b      	mov	r3, r1
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	8013      	strh	r3, [r2, #0]

			send_uart("\r\n", 2);
 8001038:	2102      	movs	r1, #2
 800103a:	486e      	ldr	r0, [pc, #440]	; (80011f4 <process_uart_input+0x2d0>)
 800103c:	f7ff fe7a 	bl	8000d34 <send_uart>
//			send_uart(buffer, strlen(buffer));

			if (new_sequence_buffered != 0) {
 8001040:	4b6d      	ldr	r3, [pc, #436]	; (80011f8 <process_uart_input+0x2d4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01d      	beq.n	8001084 <process_uart_input+0x160>
				new_sequence_buffered->period = atoi(buffer);
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <process_uart_input+0x2c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <process_uart_input+0x2d4>)
 800104e:	6814      	ldr	r4, [r2, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fcc7 	bl	80039e4 <atoi>
 8001056:	4603      	mov	r3, r0
 8001058:	6023      	str	r3, [r4, #0]
				if (new_sequence_buffered->period != 0) {
 800105a:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <process_uart_input+0x2d4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <process_uart_input+0x158>
					uart_result.result_type = UART_RESULT_NEW;
 8001064:	2301      	movs	r3, #1
 8001066:	723b      	strb	r3, [r7, #8]
					uart_result.result_data = new_sequence_buffered;
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <process_uart_input+0x2d4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
					new_sequence_buffered = 0;
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <process_uart_input+0x2d4>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
					send_uart_str("New sequence is being created");
 8001074:	4861      	ldr	r0, [pc, #388]	; (80011fc <process_uart_input+0x2d8>)
 8001076:	f7ff fe85 	bl	8000d84 <send_uart_str>
 800107a:	e0d6      	b.n	800122a <process_uart_input+0x306>
				} else {
					send_uart_str("Please, send sequence period:");
 800107c:	4860      	ldr	r0, [pc, #384]	; (8001200 <process_uart_input+0x2dc>)
 800107e:	f7ff fe81 	bl	8000d84 <send_uart_str>
 8001082:	e0d2      	b.n	800122a <process_uart_input+0x306>
				}
			}
			else if (is_new_command(buffer)) {
 8001084:	4b57      	ldr	r3, [pc, #348]	; (80011e4 <process_uart_input+0x2c0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fedb 	bl	8000e44 <is_new_command>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d05c      	beq.n	800114e <process_uart_input+0x22a>
				send_uart_str("NEW command");
 8001094:	485b      	ldr	r0, [pc, #364]	; (8001204 <process_uart_input+0x2e0>)
 8001096:	f7ff fe75 	bl	8000d84 <send_uart_str>
				int sequence_size = strlen(buffer) - 6;
 800109a:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <process_uart_input+0x2c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f8a4 	bl	80001ec <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	3b06      	subs	r3, #6
 80010a8:	613b      	str	r3, [r7, #16]
				new_sequence_buffered = malloc(sizeof(light_sequence_t));
 80010aa:	2010      	movs	r0, #16
 80010ac:	f002 fce2 	bl	8003a74 <malloc>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <process_uart_input+0x2d4>)
 80010b6:	601a      	str	r2, [r3, #0]
				new_sequence_buffered->states = malloc(
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <process_uart_input+0x2d4>)
 80010bc:	6814      	ldr	r4, [r2, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fcd8 	bl	8003a74 <malloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60e3      	str	r3, [r4, #12]
						sizeof(enum LED_STATE) * sequence_size);
				new_sequence_buffered->sequence_size = sequence_size;
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <process_uart_input+0x2d4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	605a      	str	r2, [r3, #4]
				new_sequence_buffered->last_tick = 0;
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <process_uart_input+0x2d4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]

				for (int i = 0; i < sequence_size; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
 80010dc:	e02f      	b.n	800113e <process_uart_input+0x21a>
					switch (buffer[4 + i]) {
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <process_uart_input+0x2c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010e4:	3204      	adds	r2, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b79      	cmp	r3, #121	; 0x79
 80010ec:	d015      	beq.n	800111a <process_uart_input+0x1f6>
 80010ee:	2b79      	cmp	r3, #121	; 0x79
 80010f0:	dc1b      	bgt.n	800112a <process_uart_input+0x206>
 80010f2:	2b67      	cmp	r3, #103	; 0x67
 80010f4:	d009      	beq.n	800110a <process_uart_input+0x1e6>
 80010f6:	2b72      	cmp	r3, #114	; 0x72
 80010f8:	d117      	bne.n	800112a <process_uart_input+0x206>
					case 'r':
						new_sequence_buffered->states[i] = RED;
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <process_uart_input+0x2d4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	4413      	add	r3, r2
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
						break;
 8001108:	e016      	b.n	8001138 <process_uart_input+0x214>
					case 'g':
						new_sequence_buffered->states[i] = GREEN;
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <process_uart_input+0x2d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001112:	4413      	add	r3, r2
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
						break;
 8001118:	e00e      	b.n	8001138 <process_uart_input+0x214>
					case 'y':
						new_sequence_buffered->states[i] = YELLOW;
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <process_uart_input+0x2d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001122:	4413      	add	r3, r2
 8001124:	2202      	movs	r2, #2
 8001126:	701a      	strb	r2, [r3, #0]
						break;
 8001128:	e006      	b.n	8001138 <process_uart_input+0x214>
					default:
						new_sequence_buffered->states[i] = BLACK;
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <process_uart_input+0x2d4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	4413      	add	r3, r2
 8001134:	2203      	movs	r2, #3
 8001136:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sequence_size; i++) {
 8001138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113a:	3301      	adds	r3, #1
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbcb      	blt.n	80010de <process_uart_input+0x1ba>
					};
				}
				send_uart_str("Please, send sequence period:");
 8001146:	482e      	ldr	r0, [pc, #184]	; (8001200 <process_uart_input+0x2dc>)
 8001148:	f7ff fe1c 	bl	8000d84 <send_uart_str>
 800114c:	e06d      	b.n	800122a <process_uart_input+0x306>

			} else if (is_set_interrupt_command(buffer)) {
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <process_uart_input+0x2c0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fea2 	bl	8000e9c <is_set_interrupt_command>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d023      	beq.n	80011a6 <process_uart_input+0x282>
				send_uart_str("SET_IT command");
 800115e:	482a      	ldr	r0, [pc, #168]	; (8001208 <process_uart_input+0x2e4>)
 8001160:	f7ff fe10 	bl	8000d84 <send_uart_str>
				char *interrupt_on_str = strstr(buffer, " on");
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <process_uart_input+0x2c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4928      	ldr	r1, [pc, #160]	; (800120c <process_uart_input+0x2e8>)
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fd63 	bl	8003c36 <strstr>
 8001170:	6178      	str	r0, [r7, #20]
				if (interrupt_on_str != 0) {
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <process_uart_input+0x268>
					interrupts_enabled = 0;
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <process_uart_input+0x2ec>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
					HAL_NVIC_EnableIRQ(USART6_IRQn);
 800117e:	2047      	movs	r0, #71	; 0x47
 8001180:	f000 fad3 	bl	800172a <HAL_NVIC_EnableIRQ>
					send_uart_str("SET_IT ON");
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <process_uart_input+0x2f0>)
 8001186:	f7ff fdfd 	bl	8000d84 <send_uart_str>
 800118a:	e04e      	b.n	800122a <process_uart_input+0x306>
				} else {
					interrupts_enabled = 0;
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <process_uart_input+0x2ec>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
					HAL_UART_Abort_IT(&huart6);
 8001192:	4821      	ldr	r0, [pc, #132]	; (8001218 <process_uart_input+0x2f4>)
 8001194:	f001 fbf0 	bl	8002978 <HAL_UART_Abort_IT>
					HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001198:	2047      	movs	r0, #71	; 0x47
 800119a:	f000 fad4 	bl	8001746 <HAL_NVIC_DisableIRQ>
					send_uart_str("SET_IT OFF");
 800119e:	481f      	ldr	r0, [pc, #124]	; (800121c <process_uart_input+0x2f8>)
 80011a0:	f7ff fdf0 	bl	8000d84 <send_uart_str>
 80011a4:	e041      	b.n	800122a <process_uart_input+0x306>
				}
			} else if (is_set_command(buffer)) {
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <process_uart_input+0x2c0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fe60 	bl	8000e70 <is_set_command>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d036      	beq.n	8001224 <process_uart_input+0x300>
				send_uart_str("SET command");
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <process_uart_input+0x2fc>)
 80011b8:	f7ff fde4 	bl	8000d84 <send_uart_str>
				uart_result.result_type = UART_RESULT_SET;
 80011bc:	2302      	movs	r3, #2
 80011be:	723b      	strb	r3, [r7, #8]
				int *position = malloc(sizeof(int));
 80011c0:	2004      	movs	r0, #4
 80011c2:	f002 fc57 	bl	8003a74 <malloc>
 80011c6:	4603      	mov	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
				*position = atoi(buffer + 4);
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <process_uart_input+0x2c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3304      	adds	r3, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fc07 	bl	80039e4 <atoi>
 80011d6:	4602      	mov	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]
				uart_result.result_data = position;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e023      	b.n	800122a <process_uart_input+0x306>
 80011e2:	bf00      	nop
 80011e4:	2000009c 	.word	0x2000009c
 80011e8:	20000004 	.word	0x20000004
 80011ec:	200000a4 	.word	0x200000a4
 80011f0:	08003e64 	.word	0x08003e64
 80011f4:	08003e48 	.word	0x08003e48
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	08003e68 	.word	0x08003e68
 8001200:	08003e88 	.word	0x08003e88
 8001204:	08003ea8 	.word	0x08003ea8
 8001208:	08003eb4 	.word	0x08003eb4
 800120c:	08003ec4 	.word	0x08003ec4
 8001210:	200000a8 	.word	0x200000a8
 8001214:	08003ec8 	.word	0x08003ec8
 8001218:	200000b4 	.word	0x200000b4
 800121c:	08003ed4 	.word	0x08003ed4
 8001220:	08003ee0 	.word	0x08003ee0
			} else {
				send_uart_str("No such command");
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <process_uart_input+0x34c>)
 8001226:	f7ff fdad 	bl	8000d84 <send_uart_str>
			}

			next_to_fill = 0;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <process_uart_input+0x350>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 1024; i++) {
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
 8001234:	e008      	b.n	8001248 <process_uart_input+0x324>
				buffer[i] = 0;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <process_uart_input+0x354>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	4413      	add	r3, r2
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++) {
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	3301      	adds	r3, #1
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
 8001248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124e:	dbf2      	blt.n	8001236 <process_uart_input+0x312>
			}
		}
	}
	can_read = 1;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <process_uart_input+0x358>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
	return uart_result;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	461a      	mov	r2, r3
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001262:	e882 0003 	stmia.w	r2, {r0, r1}
 8001266:	46ad      	mov	sp, r5
}
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	08003eec 	.word	0x08003eec
 8001274:	200000a4 	.word	0x200000a4
 8001278:	2000009c 	.word	0x2000009c
 800127c:	20000004 	.word	0x20000004

08001280 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_USART6_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART6_UART_Init+0x4c>)
 80012b8:	f001 f968 	bl	800258c <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f7ff fc7d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	40011400 	.word	0x40011400

080012d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_UART_MspInit+0x94>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d133      	bne.n	800135e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HAL_UART_MspInit+0x98>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_UART_MspInit+0x98>)
 8001300:	f043 0320 	orr.w	r3, r3, #32
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_UART_MspInit+0x98>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_UART_MspInit+0x98>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_UART_MspInit+0x98>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_UART_MspInit+0x98>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132e:	23c0      	movs	r3, #192	; 0xc0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800133e:	2308      	movs	r3, #8
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <HAL_UART_MspInit+0x9c>)
 800134a:	f000 faa9 	bl	80018a0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2047      	movs	r0, #71	; 0x47
 8001354:	f000 f9cd 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001358:	2047      	movs	r0, #71	; 0x47
 800135a:	f000 f9e6 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40011400 	.word	0x40011400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001390:	4c0b      	ldr	r4, [pc, #44]	; (80013c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800139e:	f7ff fca7 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f002 fb29 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff f9dd 	bl	8000764 <main>
  bx  lr    
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013b8:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 80013bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013c0:	2000010c 	.word	0x2000010c

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_Init+0x40>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_Init+0x40>)
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x40>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f973 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff fbe6 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f999 	bl	8001762 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f953 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000000 	.word	0x20000000
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000000c 	.word	0x2000000c
 8001490:	200000f8 	.word	0x200000f8

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200000f8 	.word	0x200000f8

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db12      	blt.n	80015cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	490a      	ldr	r1, [pc, #40]	; (80015d8 <__NVIC_DisableIRQ+0x44>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	3320      	adds	r3, #32
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c6:	f3bf 8f6f 	isb	sy
}
 80015ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff05 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff1a 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff0d 	bl	8001558 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff1d 	bl	8001594 <__NVIC_DisableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff94 	bl	8001698 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff fe84 	bl	8001494 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d008      	beq.n	80017ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e052      	b.n	8001852 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0216 	bic.w	r2, r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_DMA_Abort+0x62>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0208 	bic.w	r2, r2, #8
 80017ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fc:	e013      	b.n	8001826 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017fe:	f7ff fe49 	bl	8001494 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b05      	cmp	r3, #5
 800180a:	d90c      	bls.n	8001826 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2220      	movs	r2, #32
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2203      	movs	r2, #3
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e015      	b.n	8001852 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e4      	bne.n	80017fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	223f      	movs	r2, #63	; 0x3f
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d004      	beq.n	8001878 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e00c      	b.n	8001892 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2205      	movs	r2, #5
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e177      	b.n	8001bac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8166 	bne.w	8001ba6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b03      	cmp	r3, #3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d123      	bne.n	80019e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80c0 	beq.w	8001ba6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_GPIO_Init+0x324>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_GPIO_Init+0x324>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_GPIO_Init+0x324>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a42:	4a61      	ldr	r2, [pc, #388]	; (8001bc8 <HAL_GPIO_Init+0x328>)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_GPIO_Init+0x32c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d037      	beq.n	8001ade <HAL_GPIO_Init+0x23e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <HAL_GPIO_Init+0x330>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d031      	beq.n	8001ada <HAL_GPIO_Init+0x23a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a56      	ldr	r2, [pc, #344]	; (8001bd4 <HAL_GPIO_Init+0x334>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x236>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a55      	ldr	r2, [pc, #340]	; (8001bd8 <HAL_GPIO_Init+0x338>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x232>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <HAL_GPIO_Init+0x33c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x22e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a53      	ldr	r2, [pc, #332]	; (8001be0 <HAL_GPIO_Init+0x340>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x22a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_GPIO_Init+0x344>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x226>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_GPIO_Init+0x348>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x222>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_GPIO_Init+0x34c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x21e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_GPIO_Init+0x350>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x21a>
 8001ab6:	2309      	movs	r3, #9
 8001ab8:	e012      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001aba:	230a      	movs	r3, #10
 8001abc:	e010      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001abe:	2308      	movs	r3, #8
 8001ac0:	e00e      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x240>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x328>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b22:	4a34      	ldr	r2, [pc, #208]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_GPIO_Init+0x354>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae84 	bls.w	80018bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021c00 	.word	0x40021c00
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40022400 	.word	0x40022400
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_EnableOverDrive+0x90>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_PWREx_EnableOverDrive+0x90>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_PWREx_EnableOverDrive+0x90>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff fc04 	bl	8001494 <HAL_GetTick>
 8001c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c8e:	e009      	b.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c90:	f7ff fc00 	bl	8001494 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9e:	d901      	bls.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e01f      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d1ee      	bne.n	8001c90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff fbec 	bl	8001494 <HAL_GetTick>
 8001cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cbe:	e009      	b.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cc0:	f7ff fbe8 	bl	8001494 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cce:	d901      	bls.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e007      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	420e0040 	.word	0x420e0040
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	420e0044 	.word	0x420e0044

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e264      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d075      	beq.n	8001e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1a:	4ba3      	ldr	r3, [pc, #652]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d00c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x108>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d157      	bne.n	8001e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e23f      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x74>
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x98>
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8a      	ldr	r2, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d94:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a83      	ldr	r2, [pc, #524]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a80      	ldr	r2, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fb6e 	bl	8001494 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fb6a 	bl	8001494 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e204      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xc0>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb5a 	bl	8001494 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fb56 	bl	8001494 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1f0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0xe8>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d063      	beq.n	8001eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d11c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e1c4      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4952      	ldr	r1, [pc, #328]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	e03a      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x2b0>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff fb0f 	bl	8001494 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fb0b 	bl	8001494 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1a5      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4940      	ldr	r1, [pc, #256]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x2b0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff faee 	bl	8001494 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff faea 	bl	8001494 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e184      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d030      	beq.n	8001f48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_OscConfig+0x2b4>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff face 	bl	8001494 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff faca 	bl	8001494 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e164      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x200>
 8001f1a:	e015      	b.n	8001f48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x2b4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fab7 	bl	8001494 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fab3 	bl	8001494 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e14d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a0 	beq.w	8002096 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa79 	bl	8001494 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e011      	b.n	8001fca <HAL_RCC_OscConfig+0x2ce>
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	42470000 	.word	0x42470000
 8001fb0:	42470e80 	.word	0x42470e80
 8001fb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7ff fa6c 	bl	8001494 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e106      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <HAL_RCC_OscConfig+0x4e4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x2f0>
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	e01c      	b.n	8002026 <HAL_RCC_OscConfig+0x32a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x312>
 8001ff4:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0x32a>
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7ff fa31 	bl	8001494 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fa2d 	bl	8001494 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0c5      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ee      	beq.n	8002036 <HAL_RCC_OscConfig+0x33a>
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff fa1b 	bl	8001494 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fa17 	bl	8001494 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0af      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 809b 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d05c      	beq.n	8002166 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d141      	bne.n	8002138 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f9eb 	bl	8001494 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f9e7 	bl	8001494 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e081      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	019b      	lsls	r3, r3, #6
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	061b      	lsls	r3, r3, #24
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f9c0 	bl	8001494 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f9bc 	bl	8001494 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e056      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x41c>
 8002136:	e04e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff f9a9 	bl	8001494 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff f9a5 	bl	8001494 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e03f      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x44a>
 8002164:	e037      	b.n	80021d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e032      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d028      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d11a      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d111      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40007000 	.word	0x40007000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470060 	.word	0x42470060

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff f8da 	bl	8001494 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff f8d6 	bl	8001494 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f83a 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08003efc 	.word	0x08003efc
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b5b0      	push	{r4, r5, r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023be:	2100      	movs	r1, #0
 80023c0:	6079      	str	r1, [r7, #4]
 80023c2:	2100      	movs	r1, #0
 80023c4:	60f9      	str	r1, [r7, #12]
 80023c6:	2100      	movs	r1, #0
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ca:	2100      	movs	r1, #0
 80023cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ce:	4952      	ldr	r1, [pc, #328]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 80023d0:	6889      	ldr	r1, [r1, #8]
 80023d2:	f001 010c 	and.w	r1, r1, #12
 80023d6:	2908      	cmp	r1, #8
 80023d8:	d00d      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80023da:	2908      	cmp	r1, #8
 80023dc:	f200 8094 	bhi.w	8002508 <HAL_RCC_GetSysClockFreq+0x150>
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d002      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x32>
 80023e4:	2904      	cmp	r1, #4
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x38>
 80023e8:	e08e      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_GetSysClockFreq+0x164>)
 80023ec:	60bb      	str	r3, [r7, #8]
       break;
 80023ee:	e08e      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCC_GetSysClockFreq+0x168>)
 80023f2:	60bb      	str	r3, [r7, #8]
      break;
 80023f4:	e08b      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f6:	4948      	ldr	r1, [pc, #288]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f8:	6849      	ldr	r1, [r1, #4]
 80023fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80023fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002400:	4945      	ldr	r1, [pc, #276]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 8002402:	6849      	ldr	r1, [r1, #4]
 8002404:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002408:	2900      	cmp	r1, #0
 800240a:	d024      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4942      	ldr	r1, [pc, #264]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 800240e:	6849      	ldr	r1, [r1, #4]
 8002410:	0989      	lsrs	r1, r1, #6
 8002412:	4608      	mov	r0, r1
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	f240 14ff 	movw	r4, #511	; 0x1ff
 800241c:	f04f 0500 	mov.w	r5, #0
 8002420:	ea00 0204 	and.w	r2, r0, r4
 8002424:	ea01 0305 	and.w	r3, r1, r5
 8002428:	493d      	ldr	r1, [pc, #244]	; (8002520 <HAL_RCC_GetSysClockFreq+0x168>)
 800242a:	fb01 f003 	mul.w	r0, r1, r3
 800242e:	2100      	movs	r1, #0
 8002430:	fb01 f102 	mul.w	r1, r1, r2
 8002434:	1844      	adds	r4, r0, r1
 8002436:	493a      	ldr	r1, [pc, #232]	; (8002520 <HAL_RCC_GetSysClockFreq+0x168>)
 8002438:	fba2 0101 	umull	r0, r1, r2, r1
 800243c:	1863      	adds	r3, r4, r1
 800243e:	4619      	mov	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f7fd fed8 	bl	80001fc <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e04a      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	461a      	mov	r2, r3
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	ea02 0400 	and.w	r4, r2, r0
 800246e:	ea03 0501 	and.w	r5, r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	014b      	lsls	r3, r1, #5
 8002480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002484:	0142      	lsls	r2, r0, #5
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	1b00      	subs	r0, r0, r4
 800248c:	eb61 0105 	sbc.w	r1, r1, r5
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	018b      	lsls	r3, r1, #6
 800249a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800249e:	0182      	lsls	r2, r0, #6
 80024a0:	1a12      	subs	r2, r2, r0
 80024a2:	eb63 0301 	sbc.w	r3, r3, r1
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	00d9      	lsls	r1, r3, #3
 80024b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024b4:	00d0      	lsls	r0, r2, #3
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	1912      	adds	r2, r2, r4
 80024bc:	eb45 0303 	adc.w	r3, r5, r3
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	0299      	lsls	r1, r3, #10
 80024ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024ce:	0290      	lsls	r0, r2, #10
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	461a      	mov	r2, r3
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f7fd fe8c 	bl	80001fc <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	60bb      	str	r3, [r7, #8]
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_GetSysClockFreq+0x164>)
 800250a:	60bb      	str	r3, [r7, #8]
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	68bb      	ldr	r3, [r7, #8]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bdb0      	pop	{r4, r5, r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	00f42400 	.word	0x00f42400
 8002520:	017d7840 	.word	0x017d7840

08002524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_GetHCLKFreq+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff0 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0a9b      	lsrs	r3, r3, #10
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08003f0c 	.word	0x08003f0c

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffdc 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0b5b      	lsrs	r3, r3, #13
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08003f0c 	.word	0x08003f0c

0800258c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e03f      	b.n	800261e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fe8e 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f001 f83f 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b08a      	sub	sp, #40	; 0x28
 800262a:	af02      	add	r7, sp, #8
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	d17c      	bne.n	8002740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_UART_Transmit+0x2c>
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e075      	b.n	8002742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x3e>
 8002660:	2302      	movs	r3, #2
 8002662:	e06e      	b.n	8002742 <HAL_UART_Transmit+0x11c>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2221      	movs	r2, #33	; 0x21
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267a:	f7fe ff0b 	bl	8001494 <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d108      	bne.n	80026a8 <HAL_UART_Transmit+0x82>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026b8:	e02a      	b.n	8002710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fd23 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e036      	b.n	8002742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3302      	adds	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e007      	b.n	8002702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1cf      	bne.n	80026ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2140      	movs	r1, #64	; 0x40
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fcf3 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e006      	b.n	8002742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08a      	sub	sp, #40	; 0x28
 800274e:	af02      	add	r7, sp, #8
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	f040 808c 	bne.w	8002884 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_UART_Receive+0x2e>
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e084      	b.n	8002886 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_UART_Receive+0x40>
 8002786:	2302      	movs	r3, #2
 8002788:	e07d      	b.n	8002886 <HAL_UART_Receive+0x13c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2222      	movs	r2, #34	; 0x22
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fe75 	bl	8001494 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d108      	bne.n	80027d4 <HAL_UART_Receive+0x8a>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e003      	b.n	80027dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027e4:	e043      	b.n	800286e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2120      	movs	r1, #32
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fc8d 	bl	8003110 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e042      	b.n	8002886 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	b29a      	uxth	r2, r3
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3302      	adds	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e01f      	b.n	8002860 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	d007      	beq.n	800283a <HAL_UART_Receive+0xf0>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_UART_Receive+0xfe>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e008      	b.n	800285a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002854:	b2da      	uxtb	r2, r3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1b6      	bne.n	80027e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	4613      	mov	r3, r2
 800289a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d130      	bne.n	800290a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_UART_Transmit_IT+0x26>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e029      	b.n	800290c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Transmit_IT+0x38>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e022      	b.n	800290c <HAL_UART_Transmit_IT+0x7e>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2221      	movs	r2, #33	; 0x21
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002904:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	d11d      	bne.n	800296e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_UART_Receive_IT+0x26>
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e016      	b.n	8002970 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_UART_Receive_IT+0x38>
 800294c:	2302      	movs	r3, #2
 800294e:	e00f      	b.n	8002970 <HAL_UART_Receive_IT+0x58>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	461a      	mov	r2, r3
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fc41 	bl	80031ec <UART_Start_Receive_IT>
 800296a:	4603      	mov	r3, r0
 800296c:	e000      	b.n	8002970 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0a2      	sub	sp, #136	; 0x88
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8002980:	2301      	movs	r3, #1
 8002982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800299c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029ac:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e3      	bne.n	8002986 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3314      	adds	r3, #20
 80029dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029de:	65ba      	str	r2, [r7, #88]	; 0x58
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e5      	bne.n	80029be <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d119      	bne.n	8002a2e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	f023 0310 	bic.w	r3, r3, #16
 8002a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e5      	bne.n	80029fa <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d104      	bne.n	8002a4e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	4a53      	ldr	r2, [pc, #332]	; (8002b98 <HAL_UART_Abort_IT+0x220>)
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a4c:	e003      	b.n	8002a56 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2200      	movs	r2, #0
 8002a54:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00f      	beq.n	8002a7e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d104      	bne.n	8002a76 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_UART_Abort_IT+0x224>)
 8002a72:	651a      	str	r2, [r3, #80]	; 0x50
 8002a74:	e003      	b.n	8002a7e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d12d      	bne.n	8002ae8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	e853 3f00 	ldrex	r3, [r3]
 8002a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa2:	677b      	str	r3, [r7, #116]	; 0x74
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aac:	633a      	str	r2, [r7, #48]	; 0x30
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab4:	e841 2300 	strex	r3, r2, [r1]
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e5      	bne.n	8002a8c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00f      	beq.n	8002ae8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fec4 	bl	800185a <HAL_DMA_Abort_IT>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	2200      	movs	r2, #0
 8002ade:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae0:	e002      	b.n	8002ae8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d130      	bne.n	8002b58 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3314      	adds	r3, #20
 8002b14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b16:	61fa      	str	r2, [r7, #28]
 8002b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	617b      	str	r3, [r7, #20]
   return(result);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e5      	bne.n	8002af6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fe8f 	bl	800185a <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	2200      	movs	r2, #0
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	e002      	b.n	8002b58 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8002b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d116      	bne.n	8002b8e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 faab 	bl	80030e4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3788      	adds	r7, #136	; 0x88
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	0800334f 	.word	0x0800334f
 8002b9c:	080033af 	.word	0x080033af

08002ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b0ba      	sub	sp, #232	; 0xe8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_UART_IRQHandler+0x66>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fc6d 	bl	80034de <UART_Receive_IT>
      return;
 8002c04:	e256      	b.n	80030b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80de 	beq.w	8002dcc <HAL_UART_IRQHandler+0x22c>
 8002c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80d1 	beq.w	8002dcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_UART_IRQHandler+0xae>
 8002c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_UART_IRQHandler+0xd2>
 8002c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_UART_IRQHandler+0xf6>
 8002c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0204 	orr.w	r2, r3, #4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d011      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x126>
 8002ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0208 	orr.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 81ed 	beq.w	80030aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_UART_IRQHandler+0x14e>
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fbf8 	bl	80034de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_UART_IRQHandler+0x17a>
 8002d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04f      	beq.n	8002dba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 faa0 	bl	8003260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d141      	bne.n	8002db2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3314      	adds	r3, #20
 8002d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1d9      	bne.n	8002d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d013      	beq.n	8002daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	4a7d      	ldr	r2, [pc, #500]	; (8002f7c <HAL_UART_IRQHandler+0x3dc>)
 8002d88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fd63 	bl	800185a <HAL_DMA_Abort_IT>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da4:	4610      	mov	r0, r2
 8002da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e00e      	b.n	8002dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f990 	bl	80030d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e00a      	b.n	8002dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f98c 	bl	80030d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e006      	b.n	8002dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f988 	bl	80030d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dc6:	e170      	b.n	80030aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	bf00      	nop
    return;
 8002dca:	e16e      	b.n	80030aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	f040 814a 	bne.w	800306a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8143 	beq.w	800306a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 813c 	beq.w	800306a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	f040 80b4 	bne.w	8002f80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8140 	beq.w	80030ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e36:	429a      	cmp	r2, r3
 8002e38:	f080 8139 	bcs.w	80030ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	f000 8088 	beq.w	8002f62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1d9      	bne.n	8002e52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e1      	bne.n	8002e9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e3      	bne.n	8002eda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	f023 0310 	bic.w	r3, r3, #16
 8002f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f44:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e3      	bne.n	8002f20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fc0c 	bl	800177a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8c0 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f78:	e099      	b.n	80030ae <HAL_UART_IRQHandler+0x50e>
 8002f7a:	bf00      	nop
 8002f7c:	08003327 	.word	0x08003327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 808b 	beq.w	80030b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8086 	beq.w	80030b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fca:	647a      	str	r2, [r7, #68]	; 0x44
 8002fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e3      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	623b      	str	r3, [r7, #32]
   return(result);
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003002:	633a      	str	r2, [r7, #48]	; 0x30
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e3      	bne.n	8002fde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	60fb      	str	r3, [r7, #12]
   return(result);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0310 	bic.w	r3, r3, #16
 800303a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003048:	61fa      	str	r2, [r7, #28]
 800304a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	617b      	str	r3, [r7, #20]
   return(result);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e3      	bne.n	8003024 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800305c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f848 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003068:	e023      	b.n	80030b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_UART_IRQHandler+0x4ea>
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9c3 	bl	800340e <UART_Transmit_IT>
    return;
 8003088:	e014      	b.n	80030b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <HAL_UART_IRQHandler+0x514>
 8003096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa03 	bl	80034ae <UART_EndTransmit_IT>
    return;
 80030a8:	e004      	b.n	80030b4 <HAL_UART_IRQHandler+0x514>
    return;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <HAL_UART_IRQHandler+0x514>
      return;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_UART_IRQHandler+0x514>
      return;
 80030b2:	bf00      	nop
  }
}
 80030b4:	37e8      	adds	r7, #232	; 0xe8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	e050      	b.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d04c      	beq.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
 8003130:	f7fe f9b0 	bl	8001494 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313c:	429a      	cmp	r2, r3
 800313e:	d241      	bcs.n	80031c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003160:	637a      	str	r2, [r7, #52]	; 0x34
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	613b      	str	r3, [r7, #16]
   return(result);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003194:	623a      	str	r2, [r7, #32]
 8003196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003198:	69f9      	ldr	r1, [r7, #28]
 800319a:	6a3a      	ldr	r2, [r7, #32]
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e5      	bne.n	8003174 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e00f      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d09f      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	; 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2222      	movs	r2, #34	; 0x22
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003230:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b095      	sub	sp, #84	; 0x54
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003288:	643a      	str	r2, [r7, #64]	; 0x40
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800328e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3314      	adds	r3, #20
 80032a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e5      	bne.n	800329c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d119      	bne.n	800330c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f023 0310 	bic.w	r3, r3, #16
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f8:	61ba      	str	r2, [r7, #24]
 80032fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	613b      	str	r3, [r7, #16]
   return(result);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e5      	bne.n	80032d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800331a:	bf00      	nop
 800331c:	3754      	adds	r7, #84	; 0x54
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fec5 	bl	80030d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	2200      	movs	r2, #0
 8003362:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d117      	bne.n	80033a6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fea0 	bl	80030e4 <HAL_UART_AbortCpltCallback>
 80033a4:	e000      	b.n	80033a8 <UART_DMATxAbortCallback+0x5a>
      return;
 80033a6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2200      	movs	r2, #0
 80033c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d117      	bne.n	8003406 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fe70 	bl	80030e4 <HAL_UART_AbortCpltCallback>
 8003404:	e000      	b.n	8003408 <UART_DMARxAbortCallback+0x5a>
      return;
 8003406:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b21      	cmp	r3, #33	; 0x21
 8003420:	d13e      	bne.n	80034a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d114      	bne.n	8003456 <UART_Transmit_IT+0x48>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d110      	bne.n	8003456 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	e008      	b.n	8003468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6211      	str	r1, [r2, #32]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fdf4 	bl	80030bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08c      	sub	sp, #48	; 0x30
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b22      	cmp	r3, #34	; 0x22
 80034f0:	f040 80ab 	bne.w	800364a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d117      	bne.n	800352e <UART_Receive_IT+0x50>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	b29a      	uxth	r2, r3
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
 800352c:	e026      	b.n	800357c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d007      	beq.n	8003552 <UART_Receive_IT+0x74>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <UART_Receive_IT+0x82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e008      	b.n	8003572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15a      	bne.n	8003646 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0220 	bic.w	r2, r2, #32
 800359e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d135      	bne.n	800363c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	613b      	str	r3, [r7, #16]
   return(result);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	61bb      	str	r3, [r7, #24]
   return(result);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d10a      	bne.n	800362e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fd5f 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
 800363a:	e002      	b.n	8003642 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd fb69 	bl	8000d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e002      	b.n	800364c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	; 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	b09f      	sub	sp, #124	; 0x7c
 800365a:	af00      	add	r7, sp, #0
 800365c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366a:	68d9      	ldr	r1, [r3, #12]
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	ea40 0301 	orr.w	r3, r0, r1
 8003674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	431a      	orrs	r2, r3
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4313      	orrs	r3, r2
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003698:	f021 010c 	bic.w	r1, r1, #12
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a2:	430b      	orrs	r3, r1
 80036a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	6999      	ldr	r1, [r3, #24]
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	ea40 0301 	orr.w	r3, r0, r1
 80036bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4bc5      	ldr	r3, [pc, #788]	; (80039d8 <UART_SetConfig+0x384>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d004      	beq.n	80036d2 <UART_SetConfig+0x7e>
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4bc3      	ldr	r3, [pc, #780]	; (80039dc <UART_SetConfig+0x388>)
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d103      	bne.n	80036da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d2:	f7fe ff47 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 80036d6:	6778      	str	r0, [r7, #116]	; 0x74
 80036d8:	e002      	b.n	80036e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7fe ff2f 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80036de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e8:	f040 80b6 	bne.w	8003858 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	461c      	mov	r4, r3
 80036f0:	f04f 0500 	mov.w	r5, #0
 80036f4:	4622      	mov	r2, r4
 80036f6:	462b      	mov	r3, r5
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	6439      	str	r1, [r7, #64]	; 0x40
 80036fc:	415b      	adcs	r3, r3
 80036fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003704:	1912      	adds	r2, r2, r4
 8003706:	eb45 0303 	adc.w	r3, r5, r3
 800370a:	f04f 0000 	mov.w	r0, #0
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	00d9      	lsls	r1, r3, #3
 8003714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003718:	00d0      	lsls	r0, r2, #3
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	1911      	adds	r1, r2, r4
 8003720:	6639      	str	r1, [r7, #96]	; 0x60
 8003722:	416b      	adcs	r3, r5
 8003724:	667b      	str	r3, [r7, #100]	; 0x64
 8003726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	1891      	adds	r1, r2, r2
 8003732:	63b9      	str	r1, [r7, #56]	; 0x38
 8003734:	415b      	adcs	r3, r3
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800373c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003740:	f7fc fd5c 	bl	80001fc <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4ba5      	ldr	r3, [pc, #660]	; (80039e0 <UART_SetConfig+0x38c>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011e      	lsls	r6, r3, #4
 8003752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003754:	461c      	mov	r4, r3
 8003756:	f04f 0500 	mov.w	r5, #0
 800375a:	4622      	mov	r2, r4
 800375c:	462b      	mov	r3, r5
 800375e:	1891      	adds	r1, r2, r2
 8003760:	6339      	str	r1, [r7, #48]	; 0x30
 8003762:	415b      	adcs	r3, r3
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800376a:	1912      	adds	r2, r2, r4
 800376c:	eb45 0303 	adc.w	r3, r5, r3
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800377e:	00d0      	lsls	r0, r2, #3
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	1911      	adds	r1, r2, r4
 8003786:	65b9      	str	r1, [r7, #88]	; 0x58
 8003788:	416b      	adcs	r3, r5
 800378a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	461a      	mov	r2, r3
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	1891      	adds	r1, r2, r2
 8003798:	62b9      	str	r1, [r7, #40]	; 0x28
 800379a:	415b      	adcs	r3, r3
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037a6:	f7fc fd29 	bl	80001fc <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4b8c      	ldr	r3, [pc, #560]	; (80039e0 <UART_SetConfig+0x38c>)
 80037b0:	fba3 1302 	umull	r1, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2164      	movs	r1, #100	; 0x64
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <UART_SetConfig+0x38c>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037d0:	441e      	add	r6, r3
 80037d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d4:	4618      	mov	r0, r3
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	1894      	adds	r4, r2, r2
 80037e0:	623c      	str	r4, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	1812      	adds	r2, r2, r0
 80037ec:	eb41 0303 	adc.w	r3, r1, r3
 80037f0:	f04f 0400 	mov.w	r4, #0
 80037f4:	f04f 0500 	mov.w	r5, #0
 80037f8:	00dd      	lsls	r5, r3, #3
 80037fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037fe:	00d4      	lsls	r4, r2, #3
 8003800:	4622      	mov	r2, r4
 8003802:	462b      	mov	r3, r5
 8003804:	1814      	adds	r4, r2, r0
 8003806:	653c      	str	r4, [r7, #80]	; 0x50
 8003808:	414b      	adcs	r3, r1
 800380a:	657b      	str	r3, [r7, #84]	; 0x54
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	1891      	adds	r1, r2, r2
 8003818:	61b9      	str	r1, [r7, #24]
 800381a:	415b      	adcs	r3, r3
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003822:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003826:	f7fc fce9 	bl	80001fc <__aeabi_uldivmod>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <UART_SetConfig+0x38c>)
 8003830:	fba3 1302 	umull	r1, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	2164      	movs	r1, #100	; 0x64
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	3332      	adds	r3, #50	; 0x32
 8003842:	4a67      	ldr	r2, [pc, #412]	; (80039e0 <UART_SetConfig+0x38c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	f003 0207 	and.w	r2, r3, #7
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4432      	add	r2, r6
 8003854:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003856:	e0b9      	b.n	80039cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385a:	461c      	mov	r4, r3
 800385c:	f04f 0500 	mov.w	r5, #0
 8003860:	4622      	mov	r2, r4
 8003862:	462b      	mov	r3, r5
 8003864:	1891      	adds	r1, r2, r2
 8003866:	6139      	str	r1, [r7, #16]
 8003868:	415b      	adcs	r3, r3
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003870:	1912      	adds	r2, r2, r4
 8003872:	eb45 0303 	adc.w	r3, r5, r3
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	00d9      	lsls	r1, r3, #3
 8003880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003884:	00d0      	lsls	r0, r2, #3
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	eb12 0804 	adds.w	r8, r2, r4
 800388e:	eb43 0905 	adc.w	r9, r3, r5
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	008b      	lsls	r3, r1, #2
 80038a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038aa:	0082      	lsls	r2, r0, #2
 80038ac:	4640      	mov	r0, r8
 80038ae:	4649      	mov	r1, r9
 80038b0:	f7fc fca4 	bl	80001fc <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <UART_SetConfig+0x38c>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011e      	lsls	r6, r3, #4
 80038c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c4:	4618      	mov	r0, r3
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	1894      	adds	r4, r2, r2
 80038d0:	60bc      	str	r4, [r7, #8]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038da:	1812      	adds	r2, r2, r0
 80038dc:	eb41 0303 	adc.w	r3, r1, r3
 80038e0:	f04f 0400 	mov.w	r4, #0
 80038e4:	f04f 0500 	mov.w	r5, #0
 80038e8:	00dd      	lsls	r5, r3, #3
 80038ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038ee:	00d4      	lsls	r4, r2, #3
 80038f0:	4622      	mov	r2, r4
 80038f2:	462b      	mov	r3, r5
 80038f4:	1814      	adds	r4, r2, r0
 80038f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80038f8:	414b      	adcs	r3, r1
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003914:	0082      	lsls	r2, r0, #2
 8003916:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800391a:	f7fc fc6f 	bl	80001fc <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <UART_SetConfig+0x38c>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <UART_SetConfig+0x38c>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003942:	441e      	add	r6, r3
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	4618      	mov	r0, r3
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	1894      	adds	r4, r2, r2
 8003952:	603c      	str	r4, [r7, #0]
 8003954:	415b      	adcs	r3, r3
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800395c:	1812      	adds	r2, r2, r0
 800395e:	eb41 0303 	adc.w	r3, r1, r3
 8003962:	f04f 0400 	mov.w	r4, #0
 8003966:	f04f 0500 	mov.w	r5, #0
 800396a:	00dd      	lsls	r5, r3, #3
 800396c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003970:	00d4      	lsls	r4, r2, #3
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	eb12 0a00 	adds.w	sl, r2, r0
 800397a:	eb43 0b01 	adc.w	fp, r3, r1
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4618      	mov	r0, r3
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	008b      	lsls	r3, r1, #2
 8003992:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003996:	0082      	lsls	r2, r0, #2
 8003998:	4650      	mov	r0, sl
 800399a:	4659      	mov	r1, fp
 800399c:	f7fc fc2e 	bl	80001fc <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <UART_SetConfig+0x38c>)
 80039a6:	fba3 1302 	umull	r1, r3, r3, r2
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2164      	movs	r1, #100	; 0x64
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	3332      	adds	r3, #50	; 0x32
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <UART_SetConfig+0x38c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4432      	add	r2, r6
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	377c      	adds	r7, #124	; 0x7c
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d6:	bf00      	nop
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <atoi>:
 80039e4:	220a      	movs	r2, #10
 80039e6:	2100      	movs	r1, #0
 80039e8:	f000 b9c0 	b.w	8003d6c <strtol>

080039ec <__errno>:
 80039ec:	4b01      	ldr	r3, [pc, #4]	; (80039f4 <__errno+0x8>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000010 	.word	0x20000010

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	4d0d      	ldr	r5, [pc, #52]	; (8003a30 <__libc_init_array+0x38>)
 80039fc:	4c0d      	ldr	r4, [pc, #52]	; (8003a34 <__libc_init_array+0x3c>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	2600      	movs	r6, #0
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	4d0b      	ldr	r5, [pc, #44]	; (8003a38 <__libc_init_array+0x40>)
 8003a0a:	4c0c      	ldr	r4, [pc, #48]	; (8003a3c <__libc_init_array+0x44>)
 8003a0c:	f000 fa08 	bl	8003e20 <_init>
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	2600      	movs	r6, #0
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08004044 	.word	0x08004044
 8003a34:	08004044 	.word	0x08004044
 8003a38:	08004044 	.word	0x08004044
 8003a3c:	08004048 	.word	0x08004048

08003a40 <__itoa>:
 8003a40:	1e93      	subs	r3, r2, #2
 8003a42:	2b22      	cmp	r3, #34	; 0x22
 8003a44:	b510      	push	{r4, lr}
 8003a46:	460c      	mov	r4, r1
 8003a48:	d904      	bls.n	8003a54 <__itoa+0x14>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	700b      	strb	r3, [r1, #0]
 8003a4e:	461c      	mov	r4, r3
 8003a50:	4620      	mov	r0, r4
 8003a52:	bd10      	pop	{r4, pc}
 8003a54:	2a0a      	cmp	r2, #10
 8003a56:	d109      	bne.n	8003a6c <__itoa+0x2c>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	da07      	bge.n	8003a6c <__itoa+0x2c>
 8003a5c:	232d      	movs	r3, #45	; 0x2d
 8003a5e:	700b      	strb	r3, [r1, #0]
 8003a60:	4240      	negs	r0, r0
 8003a62:	2101      	movs	r1, #1
 8003a64:	4421      	add	r1, r4
 8003a66:	f000 f98b 	bl	8003d80 <__utoa>
 8003a6a:	e7f1      	b.n	8003a50 <__itoa+0x10>
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	e7f9      	b.n	8003a64 <__itoa+0x24>

08003a70 <itoa>:
 8003a70:	f7ff bfe6 	b.w	8003a40 <__itoa>

08003a74 <malloc>:
 8003a74:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <malloc+0xc>)
 8003a76:	4601      	mov	r1, r0
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f000 b863 	b.w	8003b44 <_malloc_r>
 8003a7e:	bf00      	nop
 8003a80:	20000010 	.word	0x20000010

08003a84 <free>:
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <free+0xc>)
 8003a86:	4601      	mov	r1, r0
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f000 b80b 	b.w	8003aa4 <_free_r>
 8003a8e:	bf00      	nop
 8003a90:	20000010 	.word	0x20000010

08003a94 <memset>:
 8003a94:	4402      	add	r2, r0
 8003a96:	4603      	mov	r3, r0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <_free_r>:
 8003aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aa6:	2900      	cmp	r1, #0
 8003aa8:	d048      	beq.n	8003b3c <_free_r+0x98>
 8003aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aae:	9001      	str	r0, [sp, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ab6:	bfb8      	it	lt
 8003ab8:	18e4      	addlt	r4, r4, r3
 8003aba:	f000 f9a3 	bl	8003e04 <__malloc_lock>
 8003abe:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <_free_r+0x9c>)
 8003ac0:	9801      	ldr	r0, [sp, #4]
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	4615      	mov	r5, r2
 8003ac6:	b933      	cbnz	r3, 8003ad6 <_free_r+0x32>
 8003ac8:	6063      	str	r3, [r4, #4]
 8003aca:	6014      	str	r4, [r2, #0]
 8003acc:	b003      	add	sp, #12
 8003ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ad2:	f000 b99d 	b.w	8003e10 <__malloc_unlock>
 8003ad6:	42a3      	cmp	r3, r4
 8003ad8:	d90b      	bls.n	8003af2 <_free_r+0x4e>
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	1862      	adds	r2, r4, r1
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bf04      	itt	eq
 8003ae2:	681a      	ldreq	r2, [r3, #0]
 8003ae4:	685b      	ldreq	r3, [r3, #4]
 8003ae6:	6063      	str	r3, [r4, #4]
 8003ae8:	bf04      	itt	eq
 8003aea:	1852      	addeq	r2, r2, r1
 8003aec:	6022      	streq	r2, [r4, #0]
 8003aee:	602c      	str	r4, [r5, #0]
 8003af0:	e7ec      	b.n	8003acc <_free_r+0x28>
 8003af2:	461a      	mov	r2, r3
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b10b      	cbz	r3, 8003afc <_free_r+0x58>
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d9fa      	bls.n	8003af2 <_free_r+0x4e>
 8003afc:	6811      	ldr	r1, [r2, #0]
 8003afe:	1855      	adds	r5, r2, r1
 8003b00:	42a5      	cmp	r5, r4
 8003b02:	d10b      	bne.n	8003b1c <_free_r+0x78>
 8003b04:	6824      	ldr	r4, [r4, #0]
 8003b06:	4421      	add	r1, r4
 8003b08:	1854      	adds	r4, r2, r1
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	d1dd      	bne.n	8003acc <_free_r+0x28>
 8003b10:	681c      	ldr	r4, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6053      	str	r3, [r2, #4]
 8003b16:	4421      	add	r1, r4
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	e7d7      	b.n	8003acc <_free_r+0x28>
 8003b1c:	d902      	bls.n	8003b24 <_free_r+0x80>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	6003      	str	r3, [r0, #0]
 8003b22:	e7d3      	b.n	8003acc <_free_r+0x28>
 8003b24:	6825      	ldr	r5, [r4, #0]
 8003b26:	1961      	adds	r1, r4, r5
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	bf04      	itt	eq
 8003b2c:	6819      	ldreq	r1, [r3, #0]
 8003b2e:	685b      	ldreq	r3, [r3, #4]
 8003b30:	6063      	str	r3, [r4, #4]
 8003b32:	bf04      	itt	eq
 8003b34:	1949      	addeq	r1, r1, r5
 8003b36:	6021      	streq	r1, [r4, #0]
 8003b38:	6054      	str	r4, [r2, #4]
 8003b3a:	e7c7      	b.n	8003acc <_free_r+0x28>
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd30      	pop	{r4, r5, pc}
 8003b40:	200000ac 	.word	0x200000ac

08003b44 <_malloc_r>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	1ccd      	adds	r5, r1, #3
 8003b48:	f025 0503 	bic.w	r5, r5, #3
 8003b4c:	3508      	adds	r5, #8
 8003b4e:	2d0c      	cmp	r5, #12
 8003b50:	bf38      	it	cc
 8003b52:	250c      	movcc	r5, #12
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	4606      	mov	r6, r0
 8003b58:	db01      	blt.n	8003b5e <_malloc_r+0x1a>
 8003b5a:	42a9      	cmp	r1, r5
 8003b5c:	d903      	bls.n	8003b66 <_malloc_r+0x22>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	2000      	movs	r0, #0
 8003b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b66:	f000 f94d 	bl	8003e04 <__malloc_lock>
 8003b6a:	4921      	ldr	r1, [pc, #132]	; (8003bf0 <_malloc_r+0xac>)
 8003b6c:	680a      	ldr	r2, [r1, #0]
 8003b6e:	4614      	mov	r4, r2
 8003b70:	b99c      	cbnz	r4, 8003b9a <_malloc_r+0x56>
 8003b72:	4f20      	ldr	r7, [pc, #128]	; (8003bf4 <_malloc_r+0xb0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b923      	cbnz	r3, 8003b82 <_malloc_r+0x3e>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f000 f83c 	bl	8003bf8 <_sbrk_r>
 8003b80:	6038      	str	r0, [r7, #0]
 8003b82:	4629      	mov	r1, r5
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f837 	bl	8003bf8 <_sbrk_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d123      	bne.n	8003bd6 <_malloc_r+0x92>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	6033      	str	r3, [r6, #0]
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f93c 	bl	8003e10 <__malloc_unlock>
 8003b98:	e7e3      	b.n	8003b62 <_malloc_r+0x1e>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	1b5b      	subs	r3, r3, r5
 8003b9e:	d417      	bmi.n	8003bd0 <_malloc_r+0x8c>
 8003ba0:	2b0b      	cmp	r3, #11
 8003ba2:	d903      	bls.n	8003bac <_malloc_r+0x68>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	441c      	add	r4, r3
 8003ba8:	6025      	str	r5, [r4, #0]
 8003baa:	e004      	b.n	8003bb6 <_malloc_r+0x72>
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	42a2      	cmp	r2, r4
 8003bb0:	bf0c      	ite	eq
 8003bb2:	600b      	streq	r3, [r1, #0]
 8003bb4:	6053      	strne	r3, [r2, #4]
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 f92a 	bl	8003e10 <__malloc_unlock>
 8003bbc:	f104 000b 	add.w	r0, r4, #11
 8003bc0:	1d23      	adds	r3, r4, #4
 8003bc2:	f020 0007 	bic.w	r0, r0, #7
 8003bc6:	1ac2      	subs	r2, r0, r3
 8003bc8:	d0cc      	beq.n	8003b64 <_malloc_r+0x20>
 8003bca:	1a1b      	subs	r3, r3, r0
 8003bcc:	50a3      	str	r3, [r4, r2]
 8003bce:	e7c9      	b.n	8003b64 <_malloc_r+0x20>
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	6864      	ldr	r4, [r4, #4]
 8003bd4:	e7cc      	b.n	8003b70 <_malloc_r+0x2c>
 8003bd6:	1cc4      	adds	r4, r0, #3
 8003bd8:	f024 0403 	bic.w	r4, r4, #3
 8003bdc:	42a0      	cmp	r0, r4
 8003bde:	d0e3      	beq.n	8003ba8 <_malloc_r+0x64>
 8003be0:	1a21      	subs	r1, r4, r0
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f808 	bl	8003bf8 <_sbrk_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d1dd      	bne.n	8003ba8 <_malloc_r+0x64>
 8003bec:	e7cf      	b.n	8003b8e <_malloc_r+0x4a>
 8003bee:	bf00      	nop
 8003bf0:	200000ac 	.word	0x200000ac
 8003bf4:	200000b0 	.word	0x200000b0

08003bf8 <_sbrk_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d06      	ldr	r5, [pc, #24]	; (8003c14 <_sbrk_r+0x1c>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fd f83e 	bl	8000c84 <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_sbrk_r+0x1a>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_sbrk_r+0x1a>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	200000fc 	.word	0x200000fc

08003c18 <strcat>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	7814      	ldrb	r4, [r2, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	3201      	adds	r2, #1
 8003c22:	2c00      	cmp	r4, #0
 8003c24:	d1fa      	bne.n	8003c1c <strcat+0x4>
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c30:	2a00      	cmp	r2, #0
 8003c32:	d1f9      	bne.n	8003c28 <strcat+0x10>
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <strstr>:
 8003c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c38:	780c      	ldrb	r4, [r1, #0]
 8003c3a:	b164      	cbz	r4, 8003c56 <strstr+0x20>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	1c5e      	adds	r6, r3, #1
 8003c44:	b90a      	cbnz	r2, 8003c4a <strstr+0x14>
 8003c46:	4610      	mov	r0, r2
 8003c48:	e005      	b.n	8003c56 <strstr+0x20>
 8003c4a:	4294      	cmp	r4, r2
 8003c4c:	d108      	bne.n	8003c60 <strstr+0x2a>
 8003c4e:	460d      	mov	r5, r1
 8003c50:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003c54:	b902      	cbnz	r2, 8003c58 <strstr+0x22>
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c58:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003c5c:	4297      	cmp	r7, r2
 8003c5e:	d0f7      	beq.n	8003c50 <strstr+0x1a>
 8003c60:	4633      	mov	r3, r6
 8003c62:	e7ec      	b.n	8003c3e <strstr+0x8>

08003c64 <_strtol_l.isra.0>:
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6a:	d001      	beq.n	8003c70 <_strtol_l.isra.0+0xc>
 8003c6c:	2b24      	cmp	r3, #36	; 0x24
 8003c6e:	d906      	bls.n	8003c7e <_strtol_l.isra.0+0x1a>
 8003c70:	f7ff febc 	bl	80039ec <__errno>
 8003c74:	2316      	movs	r3, #22
 8003c76:	6003      	str	r3, [r0, #0]
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	4f3a      	ldr	r7, [pc, #232]	; (8003d68 <_strtol_l.isra.0+0x104>)
 8003c80:	468e      	mov	lr, r1
 8003c82:	4676      	mov	r6, lr
 8003c84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003c88:	5de5      	ldrb	r5, [r4, r7]
 8003c8a:	f015 0508 	ands.w	r5, r5, #8
 8003c8e:	d1f8      	bne.n	8003c82 <_strtol_l.isra.0+0x1e>
 8003c90:	2c2d      	cmp	r4, #45	; 0x2d
 8003c92:	d134      	bne.n	8003cfe <_strtol_l.isra.0+0x9a>
 8003c94:	f89e 4000 	ldrb.w	r4, [lr]
 8003c98:	f04f 0801 	mov.w	r8, #1
 8003c9c:	f106 0e02 	add.w	lr, r6, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05c      	beq.n	8003d5e <_strtol_l.isra.0+0xfa>
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d10c      	bne.n	8003cc2 <_strtol_l.isra.0+0x5e>
 8003ca8:	2c30      	cmp	r4, #48	; 0x30
 8003caa:	d10a      	bne.n	8003cc2 <_strtol_l.isra.0+0x5e>
 8003cac:	f89e 4000 	ldrb.w	r4, [lr]
 8003cb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003cb4:	2c58      	cmp	r4, #88	; 0x58
 8003cb6:	d14d      	bne.n	8003d54 <_strtol_l.isra.0+0xf0>
 8003cb8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f10e 0e02 	add.w	lr, lr, #2
 8003cc2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003cc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cca:	2600      	movs	r6, #0
 8003ccc:	fbbc f9f3 	udiv	r9, ip, r3
 8003cd0:	4635      	mov	r5, r6
 8003cd2:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cd6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003cda:	2f09      	cmp	r7, #9
 8003cdc:	d818      	bhi.n	8003d10 <_strtol_l.isra.0+0xac>
 8003cde:	463c      	mov	r4, r7
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	dd24      	ble.n	8003d2e <_strtol_l.isra.0+0xca>
 8003ce4:	2e00      	cmp	r6, #0
 8003ce6:	db1f      	blt.n	8003d28 <_strtol_l.isra.0+0xc4>
 8003ce8:	45a9      	cmp	r9, r5
 8003cea:	d31d      	bcc.n	8003d28 <_strtol_l.isra.0+0xc4>
 8003cec:	d101      	bne.n	8003cf2 <_strtol_l.isra.0+0x8e>
 8003cee:	45a2      	cmp	sl, r4
 8003cf0:	db1a      	blt.n	8003d28 <_strtol_l.isra.0+0xc4>
 8003cf2:	fb05 4503 	mla	r5, r5, r3, r4
 8003cf6:	2601      	movs	r6, #1
 8003cf8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003cfc:	e7eb      	b.n	8003cd6 <_strtol_l.isra.0+0x72>
 8003cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8003d00:	bf08      	it	eq
 8003d02:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003d06:	46a8      	mov	r8, r5
 8003d08:	bf08      	it	eq
 8003d0a:	f106 0e02 	addeq.w	lr, r6, #2
 8003d0e:	e7c7      	b.n	8003ca0 <_strtol_l.isra.0+0x3c>
 8003d10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003d14:	2f19      	cmp	r7, #25
 8003d16:	d801      	bhi.n	8003d1c <_strtol_l.isra.0+0xb8>
 8003d18:	3c37      	subs	r4, #55	; 0x37
 8003d1a:	e7e1      	b.n	8003ce0 <_strtol_l.isra.0+0x7c>
 8003d1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003d20:	2f19      	cmp	r7, #25
 8003d22:	d804      	bhi.n	8003d2e <_strtol_l.isra.0+0xca>
 8003d24:	3c57      	subs	r4, #87	; 0x57
 8003d26:	e7db      	b.n	8003ce0 <_strtol_l.isra.0+0x7c>
 8003d28:	f04f 36ff 	mov.w	r6, #4294967295
 8003d2c:	e7e4      	b.n	8003cf8 <_strtol_l.isra.0+0x94>
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	da05      	bge.n	8003d3e <_strtol_l.isra.0+0xda>
 8003d32:	2322      	movs	r3, #34	; 0x22
 8003d34:	6003      	str	r3, [r0, #0]
 8003d36:	4665      	mov	r5, ip
 8003d38:	b942      	cbnz	r2, 8003d4c <_strtol_l.isra.0+0xe8>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	e79d      	b.n	8003c7a <_strtol_l.isra.0+0x16>
 8003d3e:	f1b8 0f00 	cmp.w	r8, #0
 8003d42:	d000      	beq.n	8003d46 <_strtol_l.isra.0+0xe2>
 8003d44:	426d      	negs	r5, r5
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d0f7      	beq.n	8003d3a <_strtol_l.isra.0+0xd6>
 8003d4a:	b10e      	cbz	r6, 8003d50 <_strtol_l.isra.0+0xec>
 8003d4c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	e7f2      	b.n	8003d3a <_strtol_l.isra.0+0xd6>
 8003d54:	2430      	movs	r4, #48	; 0x30
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1b3      	bne.n	8003cc2 <_strtol_l.isra.0+0x5e>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	e7b1      	b.n	8003cc2 <_strtol_l.isra.0+0x5e>
 8003d5e:	2c30      	cmp	r4, #48	; 0x30
 8003d60:	d0a4      	beq.n	8003cac <_strtol_l.isra.0+0x48>
 8003d62:	230a      	movs	r3, #10
 8003d64:	e7ad      	b.n	8003cc2 <_strtol_l.isra.0+0x5e>
 8003d66:	bf00      	nop
 8003d68:	08003f3a 	.word	0x08003f3a

08003d6c <strtol>:
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	460a      	mov	r2, r1
 8003d70:	4601      	mov	r1, r0
 8003d72:	4802      	ldr	r0, [pc, #8]	; (8003d7c <strtol+0x10>)
 8003d74:	6800      	ldr	r0, [r0, #0]
 8003d76:	f7ff bf75 	b.w	8003c64 <_strtol_l.isra.0>
 8003d7a:	bf00      	nop
 8003d7c:	20000010 	.word	0x20000010

08003d80 <__utoa>:
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	4c1f      	ldr	r4, [pc, #124]	; (8003e00 <__utoa+0x80>)
 8003d84:	b08b      	sub	sp, #44	; 0x2c
 8003d86:	4605      	mov	r5, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	466e      	mov	r6, sp
 8003d8c:	f104 0c20 	add.w	ip, r4, #32
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	6861      	ldr	r1, [r4, #4]
 8003d94:	4637      	mov	r7, r6
 8003d96:	c703      	stmia	r7!, {r0, r1}
 8003d98:	3408      	adds	r4, #8
 8003d9a:	4564      	cmp	r4, ip
 8003d9c:	463e      	mov	r6, r7
 8003d9e:	d1f7      	bne.n	8003d90 <__utoa+0x10>
 8003da0:	7921      	ldrb	r1, [r4, #4]
 8003da2:	7139      	strb	r1, [r7, #4]
 8003da4:	1e91      	subs	r1, r2, #2
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	6038      	str	r0, [r7, #0]
 8003daa:	2922      	cmp	r1, #34	; 0x22
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	d904      	bls.n	8003dbc <__utoa+0x3c>
 8003db2:	7019      	strb	r1, [r3, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	4618      	mov	r0, r3
 8003db8:	b00b      	add	sp, #44	; 0x2c
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	4684      	mov	ip, r0
 8003dc0:	fbb5 f7f2 	udiv	r7, r5, r2
 8003dc4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003dc8:	fb02 5617 	mls	r6, r2, r7, r5
 8003dcc:	4476      	add	r6, lr
 8003dce:	460c      	mov	r4, r1
 8003dd0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003dd4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003dd8:	462e      	mov	r6, r5
 8003dda:	42b2      	cmp	r2, r6
 8003ddc:	f101 0101 	add.w	r1, r1, #1
 8003de0:	463d      	mov	r5, r7
 8003de2:	d9ed      	bls.n	8003dc0 <__utoa+0x40>
 8003de4:	2200      	movs	r2, #0
 8003de6:	545a      	strb	r2, [r3, r1]
 8003de8:	1919      	adds	r1, r3, r4
 8003dea:	1aa5      	subs	r5, r4, r2
 8003dec:	42aa      	cmp	r2, r5
 8003dee:	dae2      	bge.n	8003db6 <__utoa+0x36>
 8003df0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003df4:	780e      	ldrb	r6, [r1, #0]
 8003df6:	7006      	strb	r6, [r0, #0]
 8003df8:	3201      	adds	r2, #1
 8003dfa:	f801 5901 	strb.w	r5, [r1], #-1
 8003dfe:	e7f4      	b.n	8003dea <__utoa+0x6a>
 8003e00:	08003f14 	.word	0x08003f14

08003e04 <__malloc_lock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__malloc_lock+0x8>)
 8003e06:	f000 b809 	b.w	8003e1c <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	20000104 	.word	0x20000104

08003e10 <__malloc_unlock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__malloc_unlock+0x8>)
 8003e12:	f000 b804 	b.w	8003e1e <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	20000104 	.word	0x20000104

08003e1c <__retarget_lock_acquire_recursive>:
 8003e1c:	4770      	bx	lr

08003e1e <__retarget_lock_release_recursive>:
 8003e1e:	4770      	bx	lr

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
