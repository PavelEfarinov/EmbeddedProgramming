
Lab1_427.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a10  08002a10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000090  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a487  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c92  00000000  00000000  0002a527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220e0  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a717  00000000  00000000  0004f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd6a8  00000000  00000000  000597cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00126e77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e24  00000000  00000000  00126ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080028c4 	.word	0x080028c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080028c4 	.word	0x080028c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <is_button_pressed>:
 */

#include "button_helper.h"
#include "gpio.h"

int is_button_pressed() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	static int prev_state = 0;
	static int last_release = 0;
	int current_tick = HAL_GetTick();
 80004ea:	f000 fd17 	bl	8000f1c <HAL_GetTick>
 80004ee:	4603      	mov	r3, r0
 80004f0:	607b      	str	r3, [r7, #4]
	uint8_t current_state =
			HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET ?
 80004f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f6:	4813      	ldr	r0, [pc, #76]	; (8000544 <is_button_pressed+0x60>)
 80004f8:	f000 ffae 	bl	8001458 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
					1 : 0;
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2db      	uxtb	r3, r3
	uint8_t current_state =
 8000508:	70fb      	strb	r3, [r7, #3]

	if (prev_state && current_state) {
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <is_button_pressed+0x64>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00c      	beq.n	800052c <is_button_pressed+0x48>
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d009      	beq.n	800052c <is_button_pressed+0x48>
		if (current_tick - last_release > 50) {
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <is_button_pressed+0x68>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	2b32      	cmp	r3, #50	; 0x32
 8000522:	dd01      	ble.n	8000528 <is_button_pressed+0x44>
			return 1;
 8000524:	2301      	movs	r3, #1
 8000526:	e008      	b.n	800053a <is_button_pressed+0x56>
		}
		return 0;
 8000528:	2300      	movs	r3, #0
 800052a:	e006      	b.n	800053a <is_button_pressed+0x56>
	} else {
		prev_state = current_state;
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <is_button_pressed+0x64>)
 8000530:	6013      	str	r3, [r2, #0]
		last_release = current_tick;
 8000532:	4a06      	ldr	r2, [pc, #24]	; (800054c <is_button_pressed+0x68>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6013      	str	r3, [r2, #0]
		return 0;
 8000538:	2300      	movs	r3, #0
	}
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020800 	.word	0x40020800
 8000548:	2000008c 	.word	0x2000008c
 800054c:	20000090 	.word	0x20000090

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <MX_GPIO_Init+0xf0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a34      	ldr	r2, [pc, #208]	; (8000640 <MX_GPIO_Init+0xf0>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <MX_GPIO_Init+0xf0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_GPIO_Init+0xf0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <MX_GPIO_Init+0xf0>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xf0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a26      	ldr	r2, [pc, #152]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_GPIO_Init+0xf4>)
 80005fa:	f000 ff45 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_GPIO_Init+0xf8>)
 8000614:	f000 fd74 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Yellow_Led_Pin|Red_Led_Pin;
 8000618:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_GPIO_Init+0xf4>)
 8000632:	f000 fd65 	bl	8001100 <HAL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	; 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40020800 	.word	0x40020800

0800064c <turn_on_green>:
	turn_off_green();
	turn_off_red();
	turn_off_yellow();
}

void turn_on_green() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4802      	ldr	r0, [pc, #8]	; (8000660 <turn_on_green+0x14>)
 8000658:	f000 ff16 	bl	8001488 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00

08000664 <turn_off_green>:

void turn_off_green() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	4802      	ldr	r0, [pc, #8]	; (8000678 <turn_off_green+0x14>)
 8000670:	f000 ff0a 	bl	8001488 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020c00 	.word	0x40020c00

0800067c <turn_on_red>:

void turn_on_red() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_red+0x14>)
 8000688:	f000 fefe 	bl	8001488 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_only_red>:

void turn_on_only_red() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	turn_off_yellow();
 8000698:	f000 f832 	bl	8000700 <turn_off_yellow>
	turn_off_green();
 800069c:	f7ff ffe2 	bl	8000664 <turn_off_green>
	turn_on_red();
 80006a0:	f7ff ffec 	bl	800067c <turn_on_red>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <turn_on_only_green>:

void turn_on_only_green() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	turn_off_red();
 80006ac:	f000 f810 	bl	80006d0 <turn_off_red>
	turn_off_yellow();
 80006b0:	f000 f826 	bl	8000700 <turn_off_yellow>
	turn_on_green();
 80006b4:	f7ff ffca 	bl	800064c <turn_on_green>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <turn_on_only_yellow>:

void turn_on_only_yellow() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	turn_off_red();
 80006c0:	f000 f806 	bl	80006d0 <turn_off_red>
	turn_on_yellow();
 80006c4:	f000 f810 	bl	80006e8 <turn_on_yellow>
	turn_off_green();
 80006c8:	f7ff ffcc 	bl	8000664 <turn_off_green>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <turn_off_red>:

void turn_off_red() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <turn_off_red+0x14>)
 80006dc:	f000 fed4 	bl	8001488 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <turn_on_yellow>:

void turn_on_yellow() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Yellow_Led_GPIO_Port, Yellow_Led_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <turn_on_yellow+0x14>)
 80006f4:	f000 fec8 	bl	8001488 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020c00 	.word	0x40020c00

08000700 <turn_off_yellow>:

void turn_off_yellow() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Yellow_Led_GPIO_Port, Yellow_Led_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <turn_off_yellow+0x14>)
 800070c:	f000 febc 	bl	8001488 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020c00 	.word	0x40020c00

08000718 <increase_mode>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int increase_mode(int mode)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if (mode >= 3)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b02      	cmp	r3, #2
 8000724:	dd01      	ble.n	800072a <increase_mode+0x12>
	{
		return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e001      	b.n	800072e <increase_mode+0x16>
	}
	return mode + 1;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fb85 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f90f 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f7ff ff01 	bl	8000550 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800074e:	f000 fae3 	bl	8000d18 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  	light_sequence_t* sequences = malloc(sizeof(light_sequence_t) * 4);
 8000752:	2040      	movs	r0, #64	; 0x40
 8000754:	f001 ff30 	bl	80025b8 <malloc>
 8000758:	4603      	mov	r3, r0
 800075a:	623b      	str	r3, [r7, #32]

  	sequences[0].period = 500;
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000762:	601a      	str	r2, [r3, #0]
  	sequences[0].last_tick= 0;
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  	sequences[0].sequence_size= 4;
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	2204      	movs	r2, #4
 800076e:	605a      	str	r2, [r3, #4]
  	enum LED_STATE STATE_1[] = {GREEN, RED, GREEN, YELLOW};
 8000770:	4b7b      	ldr	r3, [pc, #492]	; (8000960 <main+0x224>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  	sequences[0].states = STATE_1;
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	f107 020c 	add.w	r2, r7, #12
 800077c:	60da      	str	r2, [r3, #12]

  	sequences[1].period = 200;
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	3310      	adds	r3, #16
 8000782:	22c8      	movs	r2, #200	; 0xc8
 8000784:	601a      	str	r2, [r3, #0]
  	sequences[1].last_tick= 0;
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	3310      	adds	r3, #16
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  	sequences[1].sequence_size= 3;
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	3310      	adds	r3, #16
 8000792:	2203      	movs	r2, #3
 8000794:	605a      	str	r2, [r3, #4]
  	enum LED_STATE STATE_2[] = {GREEN, YELLOW, RED};
 8000796:	4a73      	ldr	r2, [pc, #460]	; (8000964 <main+0x228>)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	4611      	mov	r1, r2
 80007a0:	8019      	strh	r1, [r3, #0]
 80007a2:	3302      	adds	r3, #2
 80007a4:	0c12      	lsrs	r2, r2, #16
 80007a6:	701a      	strb	r2, [r3, #0]
  	sequences[1].states = STATE_2;
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	3310      	adds	r3, #16
 80007ac:	f107 0208 	add.w	r2, r7, #8
 80007b0:	60da      	str	r2, [r3, #12]


  	sequences[2].period = 500;
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	3320      	adds	r3, #32
 80007b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ba:	601a      	str	r2, [r3, #0]
  	sequences[2].last_tick= 0;
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3320      	adds	r3, #32
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  	sequences[2].sequence_size= 4;
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	3320      	adds	r3, #32
 80007c8:	2204      	movs	r2, #4
 80007ca:	605a      	str	r2, [r3, #4]
  	sequences[2].states = STATE_1;
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	3320      	adds	r3, #32
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	60da      	str	r2, [r3, #12]

  	sequences[3].period = 2000;
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007de:	601a      	str	r2, [r3, #0]
  	sequences[3].last_tick= 0;
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	3330      	adds	r3, #48	; 0x30
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  	sequences[3].sequence_size= 3;
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	3330      	adds	r3, #48	; 0x30
 80007ec:	2203      	movs	r2, #3
 80007ee:	605a      	str	r2, [r3, #4]
  	sequences[3].states = STATE_2;
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	3330      	adds	r3, #48	; 0x30
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	60da      	str	r2, [r3, #12]

	int current_mode = 0, button_is_held = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t current_tick = HAL_GetTick(), start_tick = HAL_GetTick(), sequence_tick = 0;
 8000802:	f000 fb8b 	bl	8000f1c <HAL_GetTick>
 8000806:	61f8      	str	r0, [r7, #28]
 8000808:	f000 fb88 	bl	8000f1c <HAL_GetTick>
 800080c:	6278      	str	r0, [r7, #36]	; 0x24
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		current_tick = HAL_GetTick();
 8000812:	f000 fb83 	bl	8000f1c <HAL_GetTick>
 8000816:	61f8      	str	r0, [r7, #28]
		sequence_tick = (current_tick - start_tick + sequences[current_mode].last_tick);
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000820:	0112      	lsls	r2, r2, #4
 8000822:	6a39      	ldr	r1, [r7, #32]
 8000824:	440a      	add	r2, r1
 8000826:	6892      	ldr	r2, [r2, #8]
 8000828:	4413      	add	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]

		uart_command_result_t uart_command = process_uart_input();
 800082c:	463b      	mov	r3, r7
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f9aa 	bl	8000b88 <process_uart_input>
		if(uart_command.result_type == UART_RESULT_SET)
 8000834:	783b      	ldrb	r3, [r7, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d12d      	bne.n	8000896 <main+0x15a>
		{
			int new_mode = *(int*)uart_command.result_data;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	617b      	str	r3, [r7, #20]
			if(new_mode > 0 && new_mode <= 4)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd23      	ble.n	800088e <main+0x152>
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	2b04      	cmp	r3, #4
 800084a:	dc20      	bgt.n	800088e <main+0x152>
			{
				current_mode = new_mode - 1;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3b01      	subs	r3, #1
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
				sequences[current_mode].last_tick = sequence_tick % (sequences[current_mode].period * sequences[current_mode].sequence_size);
 8000852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	6a3a      	ldr	r2, [r7, #32]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	6a39      	ldr	r1, [r7, #32]
 8000862:	440a      	add	r2, r1
 8000864:	6852      	ldr	r2, [r2, #4]
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	461a      	mov	r2, r3
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000872:	fb02 f201 	mul.w	r2, r2, r1
 8000876:	1a99      	subs	r1, r3, r2
 8000878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	4413      	add	r3, r2
 8000880:	460a      	mov	r2, r1
 8000882:	609a      	str	r2, [r3, #8]
				current_mode = new_mode - 1;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3b01      	subs	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
				start_tick = current_tick;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
			}

			free(uart_command.result_data);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fe99 	bl	80025c8 <free>
		}

		int step = (sequence_tick / sequences[current_mode].period) % sequences[current_mode].sequence_size;
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	6a3a      	ldr	r2, [r7, #32]
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80008a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	6a39      	ldr	r1, [r7, #32]
 80008ae:	440a      	add	r2, r1
 80008b0:	6852      	ldr	r2, [r2, #4]
 80008b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80008b6:	fb02 f201 	mul.w	r2, r2, r1
 80008ba:	1a9b      	subs	r3, r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
		switch (sequences[current_mode].states[step]) {
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	011b      	lsls	r3, r3, #4
 80008c2:	6a3a      	ldr	r2, [r7, #32]
 80008c4:	4413      	add	r3, r2
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4413      	add	r3, r2
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d00c      	beq.n	80008ec <main+0x1b0>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	dc0d      	bgt.n	80008f2 <main+0x1b6>
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <main+0x1a4>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d003      	beq.n	80008e6 <main+0x1aa>
 80008de:	e008      	b.n	80008f2 <main+0x1b6>
		case GREEN:
			turn_on_only_green();
 80008e0:	f7ff fee2 	bl	80006a8 <turn_on_only_green>
			break;
 80008e4:	e005      	b.n	80008f2 <main+0x1b6>
		case RED:
			turn_on_only_red();
 80008e6:	f7ff fed5 	bl	8000694 <turn_on_only_red>
			break;
 80008ea:	e002      	b.n	80008f2 <main+0x1b6>
		case YELLOW:
			turn_on_only_yellow();
 80008ec:	f7ff fee6 	bl	80006bc <turn_on_only_yellow>
			break;
 80008f0:	bf00      	nop
		}
		if(is_button_pressed() && !button_is_held)
 80008f2:	f7ff fdf7 	bl	80004e4 <is_button_pressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d024      	beq.n	8000946 <main+0x20a>
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d121      	bne.n	8000946 <main+0x20a>
		{
			sequences[current_mode].last_tick = sequence_tick % (sequences[current_mode].period * sequences[current_mode].sequence_size);
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	6a3a      	ldr	r2, [r7, #32]
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	6a39      	ldr	r1, [r7, #32]
 8000912:	440a      	add	r2, r1
 8000914:	6852      	ldr	r2, [r2, #4]
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000922:	fb02 f201 	mul.w	r2, r2, r1
 8000926:	1a99      	subs	r1, r3, r2
 8000928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	4413      	add	r3, r2
 8000930:	460a      	mov	r2, r1
 8000932:	609a      	str	r2, [r3, #8]
			current_mode = increase_mode(current_mode);
 8000934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000936:	f7ff feef 	bl	8000718 <increase_mode>
 800093a:	62f8      	str	r0, [r7, #44]	; 0x2c
			start_tick = current_tick;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
			button_is_held = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
 8000944:	e00b      	b.n	800095e <main+0x222>
		}
		else if (!is_button_pressed() && button_is_held)
 8000946:	f7ff fdcd 	bl	80004e4 <is_button_pressed>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	f47f af60 	bne.w	8000812 <main+0xd6>
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	2b00      	cmp	r3, #0
 8000956:	f43f af5c 	beq.w	8000812 <main+0xd6>
		{
			button_is_held = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1) {
 800095e:	e758      	b.n	8000812 <main+0xd6>
 8000960:	080028dc 	.word	0x080028dc
 8000964:	080028e0 	.word	0x080028e0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fe2e 	bl	80025d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <SystemClock_Config+0xd8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemClock_Config+0xd8>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0xd8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SystemClock_Config+0xdc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <SystemClock_Config+0xdc>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xdc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80009d8:	230f      	movs	r3, #15
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009dc:	23d8      	movs	r3, #216	; 0xd8
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fdb5 	bl	800155c <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 f826 	bl	8000a48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009fc:	f000 fd5e 	bl	80014bc <HAL_PWREx_EnableOverDrive>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a06:	f000 f81f 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2105      	movs	r1, #5
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 f80f 	bl	8001a4c <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a34:	f000 f808 	bl	8000a48 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	; 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 fa00 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f001 fd1c 	bl	8002564 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20030000 	.word	0x20030000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	20000094 	.word	0x20000094
 8000b60:	20000100 	.word	0x20000100

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <process_uart_input>:
#include "usart.h"

char *buffer = 0;
int next_to_fill = 0;

uart_command_result_t process_uart_input() {
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	466b      	mov	r3, sp
 8000b92:	461d      	mov	r5, r3

	if (buffer == 0) {
 8000b94:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <process_uart_input+0x17c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d107      	bne.n	8000bac <process_uart_input+0x24>
		buffer = malloc(1024 * sizeof(char));
 8000b9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ba0:	f001 fd0a 	bl	80025b8 <malloc>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b56      	ldr	r3, [pc, #344]	; (8000d04 <process_uart_input+0x17c>)
 8000baa:	601a      	str	r2, [r3, #0]
	}

	// only synchronous
	size_t size = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	char data[size];
 8000bb0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f04f 0100 	mov.w	r1, #0
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	00cb      	lsls	r3, r1, #3
 8000bc8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bcc:	00c2      	lsls	r2, r0, #3
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f04f 0100 	mov.w	r1, #0
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	00cb      	lsls	r3, r1, #3
 8000bde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000be2:	00c2      	lsls	r2, r0, #3
 8000be4:	1de3      	adds	r3, r4, #7
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	ebad 0d03 	sub.w	sp, sp, r3
 8000bee:	466b      	mov	r3, sp
 8000bf0:	3300      	adds	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_StatusTypeDef result = HAL_UART_Receive(&huart6, (uint8_t*) data, size,
 8000bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4842      	ldr	r0, [pc, #264]	; (8000d08 <process_uart_input+0x180>)
 8000bfe:	f001 f9d4 	bl	8001faa <HAL_UART_Receive>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			(uint32_t) 1);

	if (result == HAL_OK) {
 8000c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d168      	bne.n	8000ce2 <process_uart_input+0x15a>
		buffer[next_to_fill++] = data[0];
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <process_uart_input+0x17c>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <process_uart_input+0x184>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1c59      	adds	r1, r3, #1
 8000c1a:	483c      	ldr	r0, [pc, #240]	; (8000d0c <process_uart_input+0x184>)
 8000c1c:	6001      	str	r1, [r0, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c22:	7812      	ldrb	r2, [r2, #0]
 8000c24:	701a      	strb	r2, [r3, #0]
		if (data[0] == '\r') {
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d159      	bne.n	8000ce2 <process_uart_input+0x15a>
			buffer[next_to_fill - 1] = '\n';
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <process_uart_input+0x17c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <process_uart_input+0x184>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	701a      	strb	r2, [r3, #0]
			buffer[next_to_fill] = '\r';
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <process_uart_input+0x17c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <process_uart_input+0x184>)
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	220d      	movs	r2, #13
 8000c4a:	701a      	strb	r2, [r3, #0]
			buffer[next_to_fill + 1] = 0;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <process_uart_input+0x17c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <process_uart_input+0x184>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6, (uint8_t*) buffer, next_to_fill + 1,
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <process_uart_input+0x17c>)
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <process_uart_input+0x184>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4826      	ldr	r0, [pc, #152]	; (8000d08 <process_uart_input+0x180>)
 8000c6e:	f001 f90a 	bl	8001e86 <HAL_UART_Transmit>
					(uint32_t) 1);

			uart_command_result_t uart_result;

			char *command = strstr(buffer, "new");
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <process_uart_input+0x17c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4926      	ldr	r1, [pc, #152]	; (8000d10 <process_uart_input+0x188>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fd6f 	bl	800275c <strstr>
 8000c7e:	61f8      	str	r0, [r7, #28]
			if (command == buffer) {
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <process_uart_input+0x17c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d101      	bne.n	8000c8e <process_uart_input+0x106>
				uart_result.result_type = UART_RESULT_NEW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	723b      	strb	r3, [r7, #8]
			}

			command = strstr(buffer, "set");
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <process_uart_input+0x17c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4920      	ldr	r1, [pc, #128]	; (8000d14 <process_uart_input+0x18c>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fd61 	bl	800275c <strstr>
 8000c9a:	61f8      	str	r0, [r7, #28]
			if (command == buffer) {
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <process_uart_input+0x17c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d111      	bne.n	8000cca <process_uart_input+0x142>
				uart_result.result_type = UART_RESULT_SET;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	723b      	strb	r3, [r7, #8]
				int *position = malloc(sizeof(int));
 8000caa:	2004      	movs	r0, #4
 8000cac:	f001 fc84 	bl	80025b8 <malloc>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	61bb      	str	r3, [r7, #24]
				*position = atoi(buffer + 4);
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <process_uart_input+0x17c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fc4e 	bl	800255c <atoi>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	601a      	str	r2, [r3, #0]

				uart_result.result_data = position;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	60fb      	str	r3, [r7, #12]
			}
			next_to_fill = 0;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <process_uart_input+0x184>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
			return uart_result;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ce0:	e00b      	b.n	8000cfa <process_uart_input+0x172>
		}
	}

	uart_command_result_t uart_result = { UART_RESULT_NONE, 0 };
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	743b      	strb	r3, [r7, #16]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]

	return uart_result;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	461a      	mov	r2, r3
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cf6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000cfa:	46ad      	mov	sp, r5
}
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bdb0      	pop	{r4, r5, r7, pc}
 8000d04:	20000098 	.word	0x20000098
 8000d08:	200000a8 	.word	0x200000a8
 8000d0c:	2000009c 	.word	0x2000009c
 8000d10:	080028e4 	.word	0x080028e4
 8000d14:	080028e8 	.word	0x080028e8

08000d18 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_USART6_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART6_UART_Init+0x4c>)
 8000d50:	f001 f84c 	bl	8001dec <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f7ff fe75 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000a8 	.word	0x200000a8
 8000d68:	40011400 	.word	0x40011400

08000d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12b      	bne.n	8000de6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc6:	23c0      	movs	r3, #192	; 0xc0
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x8c>)
 8000de2:	f000 f98d 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e26:	f7ff fe9d 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f001 fba1 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc85 	bl	800073c <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e40:	08002a18 	.word	0x08002a18
  ldr r2, =_sbss
 8000e44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e48:	20000100 	.word	0x20000100

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f90d 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fde6 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f917 	bl	80010e6 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f8ed 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200000ec 	.word	0x200000ec

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	200000ec 	.word	0x200000ec

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5c 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e177      	b.n	800140c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8166 	bne.w	8001406 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80c0 	beq.w	8001406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b66      	ldr	r3, [pc, #408]	; (8001424 <HAL_GPIO_Init+0x324>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a65      	ldr	r2, [pc, #404]	; (8001424 <HAL_GPIO_Init+0x324>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_GPIO_Init+0x324>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d037      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_GPIO_Init+0x330>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_GPIO_Init+0x334>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a55      	ldr	r2, [pc, #340]	; (8001438 <HAL_GPIO_Init+0x338>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_GPIO_Init+0x33c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a53      	ldr	r2, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x340>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x22a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x344>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x348>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x34c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x350>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x21a>
 8001316:	2309      	movs	r3, #9
 8001318:	e012      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131a:	230a      	movs	r3, #10
 800131c:	e010      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800131e:	2308      	movs	r3, #8
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001322:	2307      	movs	r3, #7
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x240>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x240>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x328>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_GPIO_Init+0x354>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_GPIO_Init+0x354>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_GPIO_Init+0x354>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae84 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40022000 	.word	0x40022000
 8001450:	40022400 	.word	0x40022400
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e001      	b.n	800147a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_PWREx_EnableOverDrive+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd18 	bl	8000f1c <HAL_GetTick>
 80014ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f0:	f7ff fd14 	bl	8000f1c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e01f      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d1ee      	bne.n	80014f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fd00 	bl	8000f1c <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fcfc 	bl	8000f1c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	420e0040 	.word	0x420e0040
 8001554:	40007000 	.word	0x40007000
 8001558:	420e0044 	.word	0x420e0044

0800155c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e264      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d075      	beq.n	8001666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157a:	4ba3      	ldr	r3, [pc, #652]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d00c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001586:	4ba0      	ldr	r3, [pc, #640]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	2b08      	cmp	r3, #8
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b9d      	ldr	r3, [pc, #628]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b99      	ldr	r3, [pc, #612]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d05b      	beq.n	8001664 <HAL_RCC_OscConfig+0x108>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d157      	bne.n	8001664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e23f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x74>
 80015c2:	4b91      	ldr	r3, [pc, #580]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a90      	ldr	r2, [pc, #576]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x98>
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a8a      	ldr	r2, [pc, #552]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a83      	ldr	r2, [pc, #524]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a80      	ldr	r2, [pc, #512]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fc82 	bl	8000f1c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc7e 	bl	8000f1c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e204      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xc0>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc6e 	bl	8000f1c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fc6a 	bl	8000f1c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1f0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0xe8>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167e:	4b62      	ldr	r3, [pc, #392]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c4      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4952      	ldr	r1, [pc, #328]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x2b0>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fc23 	bl	8000f1c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc1f 	bl	8000f1c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a5      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4940      	ldr	r1, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x2b0>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fc02 	bl	8000f1c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fbfe 	bl	8000f1c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e184      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d030      	beq.n	80017a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x2b4>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fbe2 	bl	8000f1c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fbde 	bl	8000f1c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e164      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x200>
 800177a:	e015      	b.n	80017a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x2b4>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fbcb 	bl	8000f1c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fbc7 	bl	8000f1c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e14d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a0 	beq.w	80018f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d121      	bne.n	8001836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb8d 	bl	8000f1c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e011      	b.n	800182a <HAL_RCC_OscConfig+0x2ce>
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000
 8001810:	42470e80 	.word	0x42470e80
 8001814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff fb80 	bl	8000f1c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e106      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <HAL_RCC_OscConfig+0x4e4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x2f0>
 800183e:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a80      	ldr	r2, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x32a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a77      	ldr	r2, [pc, #476]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x32a>
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a74      	ldr	r2, [pc, #464]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a71      	ldr	r2, [pc, #452]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fb45 	bl	8000f1c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fb41 	bl	8000f1c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0c5      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x33a>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb2f 	bl	8000f1c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb2b 	bl	8000f1c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0af      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 809b 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d05c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d141      	bne.n	8001998 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff faff 	bl	8000f1c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fafb 	bl	8000f1c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e081      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	019b      	lsls	r3, r3, #6
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	061b      	lsls	r3, r3, #24
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fad4 	bl	8000f1c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fad0 	bl	8000f1c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e056      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x41c>
 8001996:	e04e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fabd 	bl	8000f1c <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fab9 	bl	8000f1c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x44a>
 80019c4:	e037      	b.n	8001a36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e032      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d028      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d11a      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d111      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40007000 	.word	0x40007000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470060 	.word	0x42470060

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0cc      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d90c      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d044      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d119      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e067      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4934      	ldr	r1, [pc, #208]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f9ee 	bl	8000f1c <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff f9ea 	bl	8000f1c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e04f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d20c      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f94e 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080028ec 	.word	0x080028ec
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6079      	str	r1, [r7, #4]
 8001c22:	2100      	movs	r1, #0
 8001c24:	60f9      	str	r1, [r7, #12]
 8001c26:	2100      	movs	r1, #0
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2e:	4952      	ldr	r1, [pc, #328]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c30:	6889      	ldr	r1, [r1, #8]
 8001c32:	f001 010c 	and.w	r1, r1, #12
 8001c36:	2908      	cmp	r1, #8
 8001c38:	d00d      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x3e>
 8001c3a:	2908      	cmp	r1, #8
 8001c3c:	f200 8094 	bhi.w	8001d68 <HAL_RCC_GetSysClockFreq+0x150>
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x32>
 8001c44:	2904      	cmp	r1, #4
 8001c46:	d003      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x38>
 8001c48:	e08e      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x164>)
 8001c4c:	60bb      	str	r3, [r7, #8]
       break;
 8001c4e:	e08e      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c52:	60bb      	str	r3, [r7, #8]
      break;
 8001c54:	e08b      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c56:	4948      	ldr	r1, [pc, #288]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c58:	6849      	ldr	r1, [r1, #4]
 8001c5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c5e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c60:	4945      	ldr	r1, [pc, #276]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c62:	6849      	ldr	r1, [r1, #4]
 8001c64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d024      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6c:	4942      	ldr	r1, [pc, #264]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c6e:	6849      	ldr	r1, [r1, #4]
 8001c70:	0989      	lsrs	r1, r1, #6
 8001c72:	4608      	mov	r0, r1
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c7c:	f04f 0500 	mov.w	r5, #0
 8001c80:	ea00 0204 	and.w	r2, r0, r4
 8001c84:	ea01 0305 	and.w	r3, r1, r5
 8001c88:	493d      	ldr	r1, [pc, #244]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c8a:	fb01 f003 	mul.w	r0, r1, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	fb01 f102 	mul.w	r1, r1, r2
 8001c94:	1844      	adds	r4, r0, r1
 8001c96:	493a      	ldr	r1, [pc, #232]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c98:	fba2 0101 	umull	r0, r1, r2, r1
 8001c9c:	1863      	adds	r3, r4, r1
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	f7fe faa0 	bl	80001ec <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e04a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	ea02 0400 	and.w	r4, r2, r0
 8001cce:	ea03 0501 	and.w	r5, r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ce4:	0142      	lsls	r2, r0, #5
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	1b00      	subs	r0, r0, r4
 8001cec:	eb61 0105 	sbc.w	r1, r1, r5
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cfe:	0182      	lsls	r2, r0, #6
 8001d00:	1a12      	subs	r2, r2, r0
 8001d02:	eb63 0301 	sbc.w	r3, r3, r1
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	00d9      	lsls	r1, r3, #3
 8001d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d14:	00d0      	lsls	r0, r2, #3
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	1912      	adds	r2, r2, r4
 8001d1c:	eb45 0303 	adc.w	r3, r5, r3
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	0299      	lsls	r1, r3, #10
 8001d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d2e:	0290      	lsls	r0, r2, #10
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	f7fe fa54 	bl	80001ec <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	60bb      	str	r3, [r7, #8]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x164>)
 8001d6a:	60bb      	str	r3, [r7, #8]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdb0      	pop	{r4, r5, r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	017d7840 	.word	0x017d7840

08001d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	080028fc 	.word	0x080028fc

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffdc 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	080028fc 	.word	0x080028fc

08001dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e03f      	b.n	8001e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe ffaa 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f9cb 	bl	80021cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b08a      	sub	sp, #40	; 0x28
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d17c      	bne.n	8001fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_UART_Transmit+0x2c>
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e075      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Transmit+0x3e>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e06e      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eda:	f7ff f81f 	bl	8000f1c <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef4:	d108      	bne.n	8001f08 <HAL_UART_Transmit+0x82>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e003      	b.n	8001f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f18:	e02a      	b.n	8001f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f8e2 	bl	80020ee <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e036      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e007      	b.n	8001f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1cf      	bne.n	8001f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f8b2 	bl	80020ee <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b08a      	sub	sp, #40	; 0x28
 8001fae:	af02      	add	r7, sp, #8
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	f040 808c 	bne.w	80020e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_UART_Receive+0x2e>
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e084      	b.n	80020e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Receive+0x40>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e07d      	b.n	80020e6 <HAL_UART_Receive+0x13c>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2222      	movs	r2, #34	; 0x22
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002006:	f7fe ff89 	bl	8000f1c <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	88fa      	ldrh	r2, [r7, #6]
 8002010:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	d108      	bne.n	8002034 <HAL_UART_Receive+0x8a>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e003      	b.n	800203c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002044:	e043      	b.n	80020ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	2120      	movs	r1, #32
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f84c 	bl	80020ee <UART_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e042      	b.n	80020e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002072:	b29a      	uxth	r2, r3
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3302      	adds	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e01f      	b.n	80020c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	d007      	beq.n	800209a <HAL_UART_Receive+0xf0>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_UART_Receive+0xfe>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e008      	b.n	80020ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1b6      	bne.n	8002046 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b090      	sub	sp, #64	; 0x40
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fe:	e050      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d04c      	beq.n	80021a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <UART_WaitOnFlagUntilTimeout+0x30>
 800210e:	f7fe ff05 	bl	8000f1c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800211a:	429a      	cmp	r2, r3
 800211c:	d241      	bcs.n	80021a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213e:	637a      	str	r2, [r7, #52]	; 0x34
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002146:	e841 2300 	strex	r3, r2, [r1]
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1e5      	bne.n	800211e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3314      	adds	r3, #20
 8002158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	e853 3f00 	ldrex	r3, [r3]
 8002160:	613b      	str	r3, [r7, #16]
   return(result);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3314      	adds	r3, #20
 8002170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002172:	623a      	str	r2, [r7, #32]
 8002174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	69f9      	ldr	r1, [r7, #28]
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e5      	bne.n	8002152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4013      	ands	r3, r2
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d09f      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3740      	adds	r7, #64	; 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d0:	b09f      	sub	sp, #124	; 0x7c
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	68d9      	ldr	r1, [r3, #12]
 80021e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	ea40 0301 	orr.w	r3, r0, r1
 80021ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4313      	orrs	r3, r2
 8002204:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002210:	f021 010c 	bic.w	r1, r1, #12
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800221a:	430b      	orrs	r3, r1
 800221c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	6999      	ldr	r1, [r3, #24]
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	ea40 0301 	orr.w	r3, r0, r1
 8002234:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4bc5      	ldr	r3, [pc, #788]	; (8002550 <UART_SetConfig+0x384>)
 800223c:	429a      	cmp	r2, r3
 800223e:	d004      	beq.n	800224a <UART_SetConfig+0x7e>
 8002240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4bc3      	ldr	r3, [pc, #780]	; (8002554 <UART_SetConfig+0x388>)
 8002246:	429a      	cmp	r2, r3
 8002248:	d103      	bne.n	8002252 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800224a:	f7ff fdbb 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 800224e:	6778      	str	r0, [r7, #116]	; 0x74
 8002250:	e002      	b.n	8002258 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002252:	f7ff fda3 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002256:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002260:	f040 80b6 	bne.w	80023d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002266:	461c      	mov	r4, r3
 8002268:	f04f 0500 	mov.w	r5, #0
 800226c:	4622      	mov	r2, r4
 800226e:	462b      	mov	r3, r5
 8002270:	1891      	adds	r1, r2, r2
 8002272:	6439      	str	r1, [r7, #64]	; 0x40
 8002274:	415b      	adcs	r3, r3
 8002276:	647b      	str	r3, [r7, #68]	; 0x44
 8002278:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800227c:	1912      	adds	r2, r2, r4
 800227e:	eb45 0303 	adc.w	r3, r5, r3
 8002282:	f04f 0000 	mov.w	r0, #0
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	00d9      	lsls	r1, r3, #3
 800228c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002290:	00d0      	lsls	r0, r2, #3
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	1911      	adds	r1, r2, r4
 8002298:	6639      	str	r1, [r7, #96]	; 0x60
 800229a:	416b      	adcs	r3, r5
 800229c:	667b      	str	r3, [r7, #100]	; 0x64
 800229e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	1891      	adds	r1, r2, r2
 80022aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80022ac:	415b      	adcs	r3, r3
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022b8:	f7fd ff98 	bl	80001ec <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4ba5      	ldr	r3, [pc, #660]	; (8002558 <UART_SetConfig+0x38c>)
 80022c2:	fba3 2302 	umull	r2, r3, r3, r2
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	011e      	lsls	r6, r3, #4
 80022ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022cc:	461c      	mov	r4, r3
 80022ce:	f04f 0500 	mov.w	r5, #0
 80022d2:	4622      	mov	r2, r4
 80022d4:	462b      	mov	r3, r5
 80022d6:	1891      	adds	r1, r2, r2
 80022d8:	6339      	str	r1, [r7, #48]	; 0x30
 80022da:	415b      	adcs	r3, r3
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
 80022de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022e2:	1912      	adds	r2, r2, r4
 80022e4:	eb45 0303 	adc.w	r3, r5, r3
 80022e8:	f04f 0000 	mov.w	r0, #0
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	00d9      	lsls	r1, r3, #3
 80022f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f6:	00d0      	lsls	r0, r2, #3
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	1911      	adds	r1, r2, r4
 80022fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002300:	416b      	adcs	r3, r5
 8002302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	461a      	mov	r2, r3
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	1891      	adds	r1, r2, r2
 8002310:	62b9      	str	r1, [r7, #40]	; 0x28
 8002312:	415b      	adcs	r3, r3
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800231a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800231e:	f7fd ff65 	bl	80001ec <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <UART_SetConfig+0x38c>)
 8002328:	fba3 1302 	umull	r1, r3, r3, r2
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	2164      	movs	r1, #100	; 0x64
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	3332      	adds	r3, #50	; 0x32
 800233a:	4a87      	ldr	r2, [pc, #540]	; (8002558 <UART_SetConfig+0x38c>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002348:	441e      	add	r6, r3
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	4618      	mov	r0, r3
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	1894      	adds	r4, r2, r2
 8002358:	623c      	str	r4, [r7, #32]
 800235a:	415b      	adcs	r3, r3
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002362:	1812      	adds	r2, r2, r0
 8002364:	eb41 0303 	adc.w	r3, r1, r3
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	f04f 0500 	mov.w	r5, #0
 8002370:	00dd      	lsls	r5, r3, #3
 8002372:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002376:	00d4      	lsls	r4, r2, #3
 8002378:	4622      	mov	r2, r4
 800237a:	462b      	mov	r3, r5
 800237c:	1814      	adds	r4, r2, r0
 800237e:	653c      	str	r4, [r7, #80]	; 0x50
 8002380:	414b      	adcs	r3, r1
 8002382:	657b      	str	r3, [r7, #84]	; 0x54
 8002384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	461a      	mov	r2, r3
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	1891      	adds	r1, r2, r2
 8002390:	61b9      	str	r1, [r7, #24]
 8002392:	415b      	adcs	r3, r3
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800239e:	f7fd ff25 	bl	80001ec <__aeabi_uldivmod>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <UART_SetConfig+0x38c>)
 80023a8:	fba3 1302 	umull	r1, r3, r3, r2
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	2164      	movs	r1, #100	; 0x64
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	3332      	adds	r3, #50	; 0x32
 80023ba:	4a67      	ldr	r2, [pc, #412]	; (8002558 <UART_SetConfig+0x38c>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4432      	add	r2, r6
 80023cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023ce:	e0b9      	b.n	8002544 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d2:	461c      	mov	r4, r3
 80023d4:	f04f 0500 	mov.w	r5, #0
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	1891      	adds	r1, r2, r2
 80023de:	6139      	str	r1, [r7, #16]
 80023e0:	415b      	adcs	r3, r3
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023e8:	1912      	adds	r2, r2, r4
 80023ea:	eb45 0303 	adc.w	r3, r5, r3
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	00d9      	lsls	r1, r3, #3
 80023f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fc:	00d0      	lsls	r0, r2, #3
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	eb12 0804 	adds.w	r8, r2, r4
 8002406:	eb43 0905 	adc.w	r9, r3, r5
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	008b      	lsls	r3, r1, #2
 800241e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002422:	0082      	lsls	r2, r0, #2
 8002424:	4640      	mov	r0, r8
 8002426:	4649      	mov	r1, r9
 8002428:	f7fd fee0 	bl	80001ec <__aeabi_uldivmod>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4b49      	ldr	r3, [pc, #292]	; (8002558 <UART_SetConfig+0x38c>)
 8002432:	fba3 2302 	umull	r2, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	011e      	lsls	r6, r3, #4
 800243a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243c:	4618      	mov	r0, r3
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	1894      	adds	r4, r2, r2
 8002448:	60bc      	str	r4, [r7, #8]
 800244a:	415b      	adcs	r3, r3
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002452:	1812      	adds	r2, r2, r0
 8002454:	eb41 0303 	adc.w	r3, r1, r3
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	f04f 0500 	mov.w	r5, #0
 8002460:	00dd      	lsls	r5, r3, #3
 8002462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002466:	00d4      	lsls	r4, r2, #3
 8002468:	4622      	mov	r2, r4
 800246a:	462b      	mov	r3, r5
 800246c:	1814      	adds	r4, r2, r0
 800246e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002470:	414b      	adcs	r3, r1
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	008b      	lsls	r3, r1, #2
 8002488:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800248c:	0082      	lsls	r2, r0, #2
 800248e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002492:	f7fd feab 	bl	80001ec <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <UART_SetConfig+0x38c>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	3332      	adds	r3, #50	; 0x32
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <UART_SetConfig+0x38c>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ba:	441e      	add	r6, r3
 80024bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024be:	4618      	mov	r0, r3
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	1894      	adds	r4, r2, r2
 80024ca:	603c      	str	r4, [r7, #0]
 80024cc:	415b      	adcs	r3, r3
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024d4:	1812      	adds	r2, r2, r0
 80024d6:	eb41 0303 	adc.w	r3, r1, r3
 80024da:	f04f 0400 	mov.w	r4, #0
 80024de:	f04f 0500 	mov.w	r5, #0
 80024e2:	00dd      	lsls	r5, r3, #3
 80024e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024e8:	00d4      	lsls	r4, r2, #3
 80024ea:	4622      	mov	r2, r4
 80024ec:	462b      	mov	r3, r5
 80024ee:	eb12 0a00 	adds.w	sl, r2, r0
 80024f2:	eb43 0b01 	adc.w	fp, r3, r1
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	008b      	lsls	r3, r1, #2
 800250a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800250e:	0082      	lsls	r2, r0, #2
 8002510:	4650      	mov	r0, sl
 8002512:	4659      	mov	r1, fp
 8002514:	f7fd fe6a 	bl	80001ec <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <UART_SetConfig+0x38c>)
 800251e:	fba3 1302 	umull	r1, r3, r3, r2
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2164      	movs	r1, #100	; 0x64
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	3332      	adds	r3, #50	; 0x32
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <UART_SetConfig+0x38c>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4432      	add	r2, r6
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	377c      	adds	r7, #124	; 0x7c
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	40011000 	.word	0x40011000
 8002554:	40011400 	.word	0x40011400
 8002558:	51eb851f 	.word	0x51eb851f

0800255c <atoi>:
 800255c:	220a      	movs	r2, #10
 800255e:	2100      	movs	r1, #0
 8002560:	f000 b998 	b.w	8002894 <strtol>

08002564 <__errno>:
 8002564:	4b01      	ldr	r3, [pc, #4]	; (800256c <__errno+0x8>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4d0d      	ldr	r5, [pc, #52]	; (80025a8 <__libc_init_array+0x38>)
 8002574:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002576:	1b64      	subs	r4, r4, r5
 8002578:	10a4      	asrs	r4, r4, #2
 800257a:	2600      	movs	r6, #0
 800257c:	42a6      	cmp	r6, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	4d0b      	ldr	r5, [pc, #44]	; (80025b0 <__libc_init_array+0x40>)
 8002582:	4c0c      	ldr	r4, [pc, #48]	; (80025b4 <__libc_init_array+0x44>)
 8002584:	f000 f99e 	bl	80028c4 <_init>
 8002588:	1b64      	subs	r4, r4, r5
 800258a:	10a4      	asrs	r4, r4, #2
 800258c:	2600      	movs	r6, #0
 800258e:	42a6      	cmp	r6, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	f855 3b04 	ldr.w	r3, [r5], #4
 8002598:	4798      	blx	r3
 800259a:	3601      	adds	r6, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a2:	4798      	blx	r3
 80025a4:	3601      	adds	r6, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	08002a10 	.word	0x08002a10
 80025ac:	08002a10 	.word	0x08002a10
 80025b0:	08002a10 	.word	0x08002a10
 80025b4:	08002a14 	.word	0x08002a14

080025b8 <malloc>:
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <malloc+0xc>)
 80025ba:	4601      	mov	r1, r0
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f000 b863 	b.w	8002688 <_malloc_r>
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <free>:
 80025c8:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <free+0xc>)
 80025ca:	4601      	mov	r1, r0
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	f000 b80b 	b.w	80025e8 <_free_r>
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <memset>:
 80025d8:	4402      	add	r2, r0
 80025da:	4603      	mov	r3, r0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d100      	bne.n	80025e2 <memset+0xa>
 80025e0:	4770      	bx	lr
 80025e2:	f803 1b01 	strb.w	r1, [r3], #1
 80025e6:	e7f9      	b.n	80025dc <memset+0x4>

080025e8 <_free_r>:
 80025e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025ea:	2900      	cmp	r1, #0
 80025ec:	d048      	beq.n	8002680 <_free_r+0x98>
 80025ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025f2:	9001      	str	r0, [sp, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f1a1 0404 	sub.w	r4, r1, #4
 80025fa:	bfb8      	it	lt
 80025fc:	18e4      	addlt	r4, r4, r3
 80025fe:	f000 f953 	bl	80028a8 <__malloc_lock>
 8002602:	4a20      	ldr	r2, [pc, #128]	; (8002684 <_free_r+0x9c>)
 8002604:	9801      	ldr	r0, [sp, #4]
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	4615      	mov	r5, r2
 800260a:	b933      	cbnz	r3, 800261a <_free_r+0x32>
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	6014      	str	r4, [r2, #0]
 8002610:	b003      	add	sp, #12
 8002612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002616:	f000 b94d 	b.w	80028b4 <__malloc_unlock>
 800261a:	42a3      	cmp	r3, r4
 800261c:	d90b      	bls.n	8002636 <_free_r+0x4e>
 800261e:	6821      	ldr	r1, [r4, #0]
 8002620:	1862      	adds	r2, r4, r1
 8002622:	4293      	cmp	r3, r2
 8002624:	bf04      	itt	eq
 8002626:	681a      	ldreq	r2, [r3, #0]
 8002628:	685b      	ldreq	r3, [r3, #4]
 800262a:	6063      	str	r3, [r4, #4]
 800262c:	bf04      	itt	eq
 800262e:	1852      	addeq	r2, r2, r1
 8002630:	6022      	streq	r2, [r4, #0]
 8002632:	602c      	str	r4, [r5, #0]
 8002634:	e7ec      	b.n	8002610 <_free_r+0x28>
 8002636:	461a      	mov	r2, r3
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b10b      	cbz	r3, 8002640 <_free_r+0x58>
 800263c:	42a3      	cmp	r3, r4
 800263e:	d9fa      	bls.n	8002636 <_free_r+0x4e>
 8002640:	6811      	ldr	r1, [r2, #0]
 8002642:	1855      	adds	r5, r2, r1
 8002644:	42a5      	cmp	r5, r4
 8002646:	d10b      	bne.n	8002660 <_free_r+0x78>
 8002648:	6824      	ldr	r4, [r4, #0]
 800264a:	4421      	add	r1, r4
 800264c:	1854      	adds	r4, r2, r1
 800264e:	42a3      	cmp	r3, r4
 8002650:	6011      	str	r1, [r2, #0]
 8002652:	d1dd      	bne.n	8002610 <_free_r+0x28>
 8002654:	681c      	ldr	r4, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	6053      	str	r3, [r2, #4]
 800265a:	4421      	add	r1, r4
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	e7d7      	b.n	8002610 <_free_r+0x28>
 8002660:	d902      	bls.n	8002668 <_free_r+0x80>
 8002662:	230c      	movs	r3, #12
 8002664:	6003      	str	r3, [r0, #0]
 8002666:	e7d3      	b.n	8002610 <_free_r+0x28>
 8002668:	6825      	ldr	r5, [r4, #0]
 800266a:	1961      	adds	r1, r4, r5
 800266c:	428b      	cmp	r3, r1
 800266e:	bf04      	itt	eq
 8002670:	6819      	ldreq	r1, [r3, #0]
 8002672:	685b      	ldreq	r3, [r3, #4]
 8002674:	6063      	str	r3, [r4, #4]
 8002676:	bf04      	itt	eq
 8002678:	1949      	addeq	r1, r1, r5
 800267a:	6021      	streq	r1, [r4, #0]
 800267c:	6054      	str	r4, [r2, #4]
 800267e:	e7c7      	b.n	8002610 <_free_r+0x28>
 8002680:	b003      	add	sp, #12
 8002682:	bd30      	pop	{r4, r5, pc}
 8002684:	200000a0 	.word	0x200000a0

08002688 <_malloc_r>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	1ccd      	adds	r5, r1, #3
 800268c:	f025 0503 	bic.w	r5, r5, #3
 8002690:	3508      	adds	r5, #8
 8002692:	2d0c      	cmp	r5, #12
 8002694:	bf38      	it	cc
 8002696:	250c      	movcc	r5, #12
 8002698:	2d00      	cmp	r5, #0
 800269a:	4606      	mov	r6, r0
 800269c:	db01      	blt.n	80026a2 <_malloc_r+0x1a>
 800269e:	42a9      	cmp	r1, r5
 80026a0:	d903      	bls.n	80026aa <_malloc_r+0x22>
 80026a2:	230c      	movs	r3, #12
 80026a4:	6033      	str	r3, [r6, #0]
 80026a6:	2000      	movs	r0, #0
 80026a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026aa:	f000 f8fd 	bl	80028a8 <__malloc_lock>
 80026ae:	4921      	ldr	r1, [pc, #132]	; (8002734 <_malloc_r+0xac>)
 80026b0:	680a      	ldr	r2, [r1, #0]
 80026b2:	4614      	mov	r4, r2
 80026b4:	b99c      	cbnz	r4, 80026de <_malloc_r+0x56>
 80026b6:	4f20      	ldr	r7, [pc, #128]	; (8002738 <_malloc_r+0xb0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b923      	cbnz	r3, 80026c6 <_malloc_r+0x3e>
 80026bc:	4621      	mov	r1, r4
 80026be:	4630      	mov	r0, r6
 80026c0:	f000 f83c 	bl	800273c <_sbrk_r>
 80026c4:	6038      	str	r0, [r7, #0]
 80026c6:	4629      	mov	r1, r5
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 f837 	bl	800273c <_sbrk_r>
 80026ce:	1c43      	adds	r3, r0, #1
 80026d0:	d123      	bne.n	800271a <_malloc_r+0x92>
 80026d2:	230c      	movs	r3, #12
 80026d4:	6033      	str	r3, [r6, #0]
 80026d6:	4630      	mov	r0, r6
 80026d8:	f000 f8ec 	bl	80028b4 <__malloc_unlock>
 80026dc:	e7e3      	b.n	80026a6 <_malloc_r+0x1e>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	1b5b      	subs	r3, r3, r5
 80026e2:	d417      	bmi.n	8002714 <_malloc_r+0x8c>
 80026e4:	2b0b      	cmp	r3, #11
 80026e6:	d903      	bls.n	80026f0 <_malloc_r+0x68>
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	441c      	add	r4, r3
 80026ec:	6025      	str	r5, [r4, #0]
 80026ee:	e004      	b.n	80026fa <_malloc_r+0x72>
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	42a2      	cmp	r2, r4
 80026f4:	bf0c      	ite	eq
 80026f6:	600b      	streq	r3, [r1, #0]
 80026f8:	6053      	strne	r3, [r2, #4]
 80026fa:	4630      	mov	r0, r6
 80026fc:	f000 f8da 	bl	80028b4 <__malloc_unlock>
 8002700:	f104 000b 	add.w	r0, r4, #11
 8002704:	1d23      	adds	r3, r4, #4
 8002706:	f020 0007 	bic.w	r0, r0, #7
 800270a:	1ac2      	subs	r2, r0, r3
 800270c:	d0cc      	beq.n	80026a8 <_malloc_r+0x20>
 800270e:	1a1b      	subs	r3, r3, r0
 8002710:	50a3      	str	r3, [r4, r2]
 8002712:	e7c9      	b.n	80026a8 <_malloc_r+0x20>
 8002714:	4622      	mov	r2, r4
 8002716:	6864      	ldr	r4, [r4, #4]
 8002718:	e7cc      	b.n	80026b4 <_malloc_r+0x2c>
 800271a:	1cc4      	adds	r4, r0, #3
 800271c:	f024 0403 	bic.w	r4, r4, #3
 8002720:	42a0      	cmp	r0, r4
 8002722:	d0e3      	beq.n	80026ec <_malloc_r+0x64>
 8002724:	1a21      	subs	r1, r4, r0
 8002726:	4630      	mov	r0, r6
 8002728:	f000 f808 	bl	800273c <_sbrk_r>
 800272c:	3001      	adds	r0, #1
 800272e:	d1dd      	bne.n	80026ec <_malloc_r+0x64>
 8002730:	e7cf      	b.n	80026d2 <_malloc_r+0x4a>
 8002732:	bf00      	nop
 8002734:	200000a0 	.word	0x200000a0
 8002738:	200000a4 	.word	0x200000a4

0800273c <_sbrk_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4d06      	ldr	r5, [pc, #24]	; (8002758 <_sbrk_r+0x1c>)
 8002740:	2300      	movs	r3, #0
 8002742:	4604      	mov	r4, r0
 8002744:	4608      	mov	r0, r1
 8002746:	602b      	str	r3, [r5, #0]
 8002748:	f7fe f9d6 	bl	8000af8 <_sbrk>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_sbrk_r+0x1a>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_sbrk_r+0x1a>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000f0 	.word	0x200000f0

0800275c <strstr>:
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	780c      	ldrb	r4, [r1, #0]
 8002760:	b164      	cbz	r4, 800277c <strstr+0x20>
 8002762:	4603      	mov	r3, r0
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	1c5e      	adds	r6, r3, #1
 800276a:	b90a      	cbnz	r2, 8002770 <strstr+0x14>
 800276c:	4610      	mov	r0, r2
 800276e:	e005      	b.n	800277c <strstr+0x20>
 8002770:	4294      	cmp	r4, r2
 8002772:	d108      	bne.n	8002786 <strstr+0x2a>
 8002774:	460d      	mov	r5, r1
 8002776:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800277a:	b902      	cbnz	r2, 800277e <strstr+0x22>
 800277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002782:	4297      	cmp	r7, r2
 8002784:	d0f7      	beq.n	8002776 <strstr+0x1a>
 8002786:	4633      	mov	r3, r6
 8002788:	e7ec      	b.n	8002764 <strstr+0x8>
	...

0800278c <_strtol_l.isra.0>:
 800278c:	2b01      	cmp	r3, #1
 800278e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002792:	d001      	beq.n	8002798 <_strtol_l.isra.0+0xc>
 8002794:	2b24      	cmp	r3, #36	; 0x24
 8002796:	d906      	bls.n	80027a6 <_strtol_l.isra.0+0x1a>
 8002798:	f7ff fee4 	bl	8002564 <__errno>
 800279c:	2316      	movs	r3, #22
 800279e:	6003      	str	r3, [r0, #0]
 80027a0:	2000      	movs	r0, #0
 80027a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a6:	4f3a      	ldr	r7, [pc, #232]	; (8002890 <_strtol_l.isra.0+0x104>)
 80027a8:	468e      	mov	lr, r1
 80027aa:	4676      	mov	r6, lr
 80027ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80027b0:	5de5      	ldrb	r5, [r4, r7]
 80027b2:	f015 0508 	ands.w	r5, r5, #8
 80027b6:	d1f8      	bne.n	80027aa <_strtol_l.isra.0+0x1e>
 80027b8:	2c2d      	cmp	r4, #45	; 0x2d
 80027ba:	d134      	bne.n	8002826 <_strtol_l.isra.0+0x9a>
 80027bc:	f89e 4000 	ldrb.w	r4, [lr]
 80027c0:	f04f 0801 	mov.w	r8, #1
 80027c4:	f106 0e02 	add.w	lr, r6, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05c      	beq.n	8002886 <_strtol_l.isra.0+0xfa>
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d10c      	bne.n	80027ea <_strtol_l.isra.0+0x5e>
 80027d0:	2c30      	cmp	r4, #48	; 0x30
 80027d2:	d10a      	bne.n	80027ea <_strtol_l.isra.0+0x5e>
 80027d4:	f89e 4000 	ldrb.w	r4, [lr]
 80027d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80027dc:	2c58      	cmp	r4, #88	; 0x58
 80027de:	d14d      	bne.n	800287c <_strtol_l.isra.0+0xf0>
 80027e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80027e4:	2310      	movs	r3, #16
 80027e6:	f10e 0e02 	add.w	lr, lr, #2
 80027ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80027ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80027f2:	2600      	movs	r6, #0
 80027f4:	fbbc f9f3 	udiv	r9, ip, r3
 80027f8:	4635      	mov	r5, r6
 80027fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80027fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002802:	2f09      	cmp	r7, #9
 8002804:	d818      	bhi.n	8002838 <_strtol_l.isra.0+0xac>
 8002806:	463c      	mov	r4, r7
 8002808:	42a3      	cmp	r3, r4
 800280a:	dd24      	ble.n	8002856 <_strtol_l.isra.0+0xca>
 800280c:	2e00      	cmp	r6, #0
 800280e:	db1f      	blt.n	8002850 <_strtol_l.isra.0+0xc4>
 8002810:	45a9      	cmp	r9, r5
 8002812:	d31d      	bcc.n	8002850 <_strtol_l.isra.0+0xc4>
 8002814:	d101      	bne.n	800281a <_strtol_l.isra.0+0x8e>
 8002816:	45a2      	cmp	sl, r4
 8002818:	db1a      	blt.n	8002850 <_strtol_l.isra.0+0xc4>
 800281a:	fb05 4503 	mla	r5, r5, r3, r4
 800281e:	2601      	movs	r6, #1
 8002820:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002824:	e7eb      	b.n	80027fe <_strtol_l.isra.0+0x72>
 8002826:	2c2b      	cmp	r4, #43	; 0x2b
 8002828:	bf08      	it	eq
 800282a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800282e:	46a8      	mov	r8, r5
 8002830:	bf08      	it	eq
 8002832:	f106 0e02 	addeq.w	lr, r6, #2
 8002836:	e7c7      	b.n	80027c8 <_strtol_l.isra.0+0x3c>
 8002838:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800283c:	2f19      	cmp	r7, #25
 800283e:	d801      	bhi.n	8002844 <_strtol_l.isra.0+0xb8>
 8002840:	3c37      	subs	r4, #55	; 0x37
 8002842:	e7e1      	b.n	8002808 <_strtol_l.isra.0+0x7c>
 8002844:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002848:	2f19      	cmp	r7, #25
 800284a:	d804      	bhi.n	8002856 <_strtol_l.isra.0+0xca>
 800284c:	3c57      	subs	r4, #87	; 0x57
 800284e:	e7db      	b.n	8002808 <_strtol_l.isra.0+0x7c>
 8002850:	f04f 36ff 	mov.w	r6, #4294967295
 8002854:	e7e4      	b.n	8002820 <_strtol_l.isra.0+0x94>
 8002856:	2e00      	cmp	r6, #0
 8002858:	da05      	bge.n	8002866 <_strtol_l.isra.0+0xda>
 800285a:	2322      	movs	r3, #34	; 0x22
 800285c:	6003      	str	r3, [r0, #0]
 800285e:	4665      	mov	r5, ip
 8002860:	b942      	cbnz	r2, 8002874 <_strtol_l.isra.0+0xe8>
 8002862:	4628      	mov	r0, r5
 8002864:	e79d      	b.n	80027a2 <_strtol_l.isra.0+0x16>
 8002866:	f1b8 0f00 	cmp.w	r8, #0
 800286a:	d000      	beq.n	800286e <_strtol_l.isra.0+0xe2>
 800286c:	426d      	negs	r5, r5
 800286e:	2a00      	cmp	r2, #0
 8002870:	d0f7      	beq.n	8002862 <_strtol_l.isra.0+0xd6>
 8002872:	b10e      	cbz	r6, 8002878 <_strtol_l.isra.0+0xec>
 8002874:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002878:	6011      	str	r1, [r2, #0]
 800287a:	e7f2      	b.n	8002862 <_strtol_l.isra.0+0xd6>
 800287c:	2430      	movs	r4, #48	; 0x30
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1b3      	bne.n	80027ea <_strtol_l.isra.0+0x5e>
 8002882:	2308      	movs	r3, #8
 8002884:	e7b1      	b.n	80027ea <_strtol_l.isra.0+0x5e>
 8002886:	2c30      	cmp	r4, #48	; 0x30
 8002888:	d0a4      	beq.n	80027d4 <_strtol_l.isra.0+0x48>
 800288a:	230a      	movs	r3, #10
 800288c:	e7ad      	b.n	80027ea <_strtol_l.isra.0+0x5e>
 800288e:	bf00      	nop
 8002890:	08002905 	.word	0x08002905

08002894 <strtol>:
 8002894:	4613      	mov	r3, r2
 8002896:	460a      	mov	r2, r1
 8002898:	4601      	mov	r1, r0
 800289a:	4802      	ldr	r0, [pc, #8]	; (80028a4 <strtol+0x10>)
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f7ff bf75 	b.w	800278c <_strtol_l.isra.0>
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <__malloc_lock>:
 80028a8:	4801      	ldr	r0, [pc, #4]	; (80028b0 <__malloc_lock+0x8>)
 80028aa:	f000 b809 	b.w	80028c0 <__retarget_lock_acquire_recursive>
 80028ae:	bf00      	nop
 80028b0:	200000f8 	.word	0x200000f8

080028b4 <__malloc_unlock>:
 80028b4:	4801      	ldr	r0, [pc, #4]	; (80028bc <__malloc_unlock+0x8>)
 80028b6:	f000 b804 	b.w	80028c2 <__retarget_lock_release_recursive>
 80028ba:	bf00      	nop
 80028bc:	200000f8 	.word	0x200000f8

080028c0 <__retarget_lock_acquire_recursive>:
 80028c0:	4770      	bx	lr

080028c2 <__retarget_lock_release_recursive>:
 80028c2:	4770      	bx	lr

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
